
lab3_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002ed8  08002ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef8  08002ef8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002ef8  08002ef8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ef8  08002ef8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ef8  08002ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000074  08002f74  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08002f74  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000972b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b71  00000000  00000000  000297c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002b340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ccd  00000000  00000000  0002c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcaf  00000000  00000000  0004345d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824f9  00000000  00000000  0004f10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1605  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d0  00000000  00000000  000d1658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ec0 	.word	0x08002ec0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002ec0 	.word	0x08002ec0

0800014c <getTimeAtIndex0>:
#include "fsm_automatic.h"
#include "led_controller.h"
#include "main.h"


int getTimeAtIndex0(int time) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	int temp = time/10;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a06      	ldr	r2, [pc, #24]	; (8000170 <getTimeAtIndex0+0x24>)
 8000158:	fb82 1203 	smull	r1, r2, r2, r3
 800015c:	1092      	asrs	r2, r2, #2
 800015e:	17db      	asrs	r3, r3, #31
 8000160:	1ad3      	subs	r3, r2, r3
 8000162:	60fb      	str	r3, [r7, #12]
	return temp;
 8000164:	68fb      	ldr	r3, [r7, #12]
}
 8000166:	4618      	mov	r0, r3
 8000168:	3714      	adds	r7, #20
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	66666667 	.word	0x66666667

08000174 <getTimeAtIndex1>:
int getTimeAtIndex1(int time) {
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
	return time%10;
 800017c:	687a      	ldr	r2, [r7, #4]
 800017e:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <getTimeAtIndex1+0x2c>)
 8000180:	fb83 1302 	smull	r1, r3, r3, r2
 8000184:	1099      	asrs	r1, r3, #2
 8000186:	17d3      	asrs	r3, r2, #31
 8000188:	1ac9      	subs	r1, r1, r3
 800018a:	460b      	mov	r3, r1
 800018c:	009b      	lsls	r3, r3, #2
 800018e:	440b      	add	r3, r1
 8000190:	005b      	lsls	r3, r3, #1
 8000192:	1ad1      	subs	r1, r2, r3
 8000194:	460b      	mov	r3, r1
}
 8000196:	4618      	mov	r0, r3
 8000198:	370c      	adds	r7, #12
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	66666667 	.word	0x66666667

080001a4 <fsm_automatic_run1>:

int led7SegState = 1;
int led7SegState2 = 1;

void fsm_automatic_run1() {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	switch(LANE1_STATUS) { //for lane 1
 80001a8:	4bb2      	ldr	r3, [pc, #712]	; (8000474 <fsm_automatic_run1+0x2d0>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	3b01      	subs	r3, #1
 80001ae:	2b03      	cmp	r3, #3
 80001b0:	f200 819b 	bhi.w	80004ea <fsm_automatic_run1+0x346>
 80001b4:	a201      	add	r2, pc, #4	; (adr r2, 80001bc <fsm_automatic_run1+0x18>)
 80001b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ba:	bf00      	nop
 80001bc:	080001cd 	.word	0x080001cd
 80001c0:	080001f7 	.word	0x080001f7
 80001c4:	080002e7 	.word	0x080002e7
 80001c8:	080003d7 	.word	0x080003d7
		case LANE1_INIT:
			initTrafficLight1();
 80001cc:	f000 fffc 	bl	80011c8 <initTrafficLight1>
			LANE1_STATUS = LANE1_RED;
 80001d0:	4ba8      	ldr	r3, [pc, #672]	; (8000474 <fsm_automatic_run1+0x2d0>)
 80001d2:	2202      	movs	r2, #2
 80001d4:	601a      	str	r2, [r3, #0]
			setTimer1(led_duration[0]*1000); //
 80001d6:	4ba8      	ldr	r3, [pc, #672]	; (8000478 <fsm_automatic_run1+0x2d4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001de:	fb02 f303 	mul.w	r3, r2, r3
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 f9b4 	bl	8001550 <setTimer1>
			timer4_flag = 1;
 80001e8:	4ba4      	ldr	r3, [pc, #656]	; (800047c <fsm_automatic_run1+0x2d8>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	601a      	str	r2, [r3, #0]
			led7SegState = 1;
 80001ee:	4ba4      	ldr	r3, [pc, #656]	; (8000480 <fsm_automatic_run1+0x2dc>)
 80001f0:	2201      	movs	r2, #1
 80001f2:	601a      	str	r2, [r3, #0]
			break;
 80001f4:	e180      	b.n	80004f8 <fsm_automatic_run1+0x354>
		case LANE1_RED:
			setTrafficRed1();
 80001f6:	f001 f813 	bl	8001220 <setTrafficRed1>

			if (timer4_flag == 1) {
 80001fa:	4ba0      	ldr	r3, [pc, #640]	; (800047c <fsm_automatic_run1+0x2d8>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d156      	bne.n	80002b0 <fsm_automatic_run1+0x10c>
				switch(led7SegState) {
 8000202:	4b9f      	ldr	r3, [pc, #636]	; (8000480 <fsm_automatic_run1+0x2dc>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	3b01      	subs	r3, #1
 8000208:	2b03      	cmp	r3, #3
 800020a:	f200 816e 	bhi.w	80004ea <fsm_automatic_run1+0x346>
 800020e:	a201      	add	r2, pc, #4	; (adr r2, 8000214 <fsm_automatic_run1+0x70>)
 8000210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000214:	08000225 	.word	0x08000225
 8000218:	08000253 	.word	0x08000253
 800021c:	08000281 	.word	0x08000281
 8000220:	08000293 	.word	0x08000293
				case 1:
					enableLed7Seg1();
 8000224:	f000 ff58 	bl	80010d8 <enableLed7Seg1>
					display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[0]-countDownRed1)]);
 8000228:	4b93      	ldr	r3, [pc, #588]	; (8000478 <fsm_automatic_run1+0x2d4>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	4b95      	ldr	r3, [pc, #596]	; (8000484 <fsm_automatic_run1+0x2e0>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	1ad3      	subs	r3, r2, r3
 8000232:	4618      	mov	r0, r3
 8000234:	f7ff ff8a 	bl	800014c <getTimeAtIndex0>
 8000238:	4603      	mov	r3, r0
 800023a:	4a93      	ldr	r2, [pc, #588]	; (8000488 <fsm_automatic_run1+0x2e4>)
 800023c:	5cd3      	ldrb	r3, [r2, r3]
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fed8 	bl	8000ff4 <display7SEG_1>
					setTimer4(250);
 8000244:	20fa      	movs	r0, #250	; 0xfa
 8000246:	f001 f9d7 	bl	80015f8 <setTimer4>
					led7SegState = 2;
 800024a:	4b8d      	ldr	r3, [pc, #564]	; (8000480 <fsm_automatic_run1+0x2dc>)
 800024c:	2202      	movs	r2, #2
 800024e:	601a      	str	r2, [r3, #0]
					break;
 8000250:	e02d      	b.n	80002ae <fsm_automatic_run1+0x10a>
				case 2:
					enableLed7Seg2();
 8000252:	f000 ff5f 	bl	8001114 <enableLed7Seg2>
					display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[0]-countDownRed1)]);
 8000256:	4b88      	ldr	r3, [pc, #544]	; (8000478 <fsm_automatic_run1+0x2d4>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b8a      	ldr	r3, [pc, #552]	; (8000484 <fsm_automatic_run1+0x2e0>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	1ad3      	subs	r3, r2, r3
 8000260:	4618      	mov	r0, r3
 8000262:	f7ff ff87 	bl	8000174 <getTimeAtIndex1>
 8000266:	4603      	mov	r3, r0
 8000268:	4a87      	ldr	r2, [pc, #540]	; (8000488 <fsm_automatic_run1+0x2e4>)
 800026a:	5cd3      	ldrb	r3, [r2, r3]
 800026c:	4618      	mov	r0, r3
 800026e:	f000 fec1 	bl	8000ff4 <display7SEG_1>
					setTimer4(250);
 8000272:	20fa      	movs	r0, #250	; 0xfa
 8000274:	f001 f9c0 	bl	80015f8 <setTimer4>
					led7SegState = 3;
 8000278:	4b81      	ldr	r3, [pc, #516]	; (8000480 <fsm_automatic_run1+0x2dc>)
 800027a:	2203      	movs	r2, #3
 800027c:	601a      	str	r2, [r3, #0]
					break;
 800027e:	e016      	b.n	80002ae <fsm_automatic_run1+0x10a>
				case 3:
					enableLed7Seg3();
 8000280:	f000 ff66 	bl	8001150 <enableLed7Seg3>
					setTimer4(250);
 8000284:	20fa      	movs	r0, #250	; 0xfa
 8000286:	f001 f9b7 	bl	80015f8 <setTimer4>
					led7SegState = 4;
 800028a:	4b7d      	ldr	r3, [pc, #500]	; (8000480 <fsm_automatic_run1+0x2dc>)
 800028c:	2204      	movs	r2, #4
 800028e:	601a      	str	r2, [r3, #0]
					break;
 8000290:	e00d      	b.n	80002ae <fsm_automatic_run1+0x10a>
				case 4:
					enableLed7Seg4();
 8000292:	f000 ff7b 	bl	800118c <enableLed7Seg4>
					countDownRed1++;
 8000296:	4b7b      	ldr	r3, [pc, #492]	; (8000484 <fsm_automatic_run1+0x2e0>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	3301      	adds	r3, #1
 800029c:	4a79      	ldr	r2, [pc, #484]	; (8000484 <fsm_automatic_run1+0x2e0>)
 800029e:	6013      	str	r3, [r2, #0]
					setTimer4(250);
 80002a0:	20fa      	movs	r0, #250	; 0xfa
 80002a2:	f001 f9a9 	bl	80015f8 <setTimer4>
					led7SegState = 1;
 80002a6:	4b76      	ldr	r3, [pc, #472]	; (8000480 <fsm_automatic_run1+0x2dc>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	601a      	str	r2, [r3, #0]
					break;
 80002ac:	bf00      	nop
				}
				default:
					break;
 80002ae:	e11c      	b.n	80004ea <fsm_automatic_run1+0x346>
			}
			if(timer1_flag == 1) {
 80002b0:	4b76      	ldr	r3, [pc, #472]	; (800048c <fsm_automatic_run1+0x2e8>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	f040 811a 	bne.w	80004ee <fsm_automatic_run1+0x34a>
				setTimer1(led_duration[2]*1000); //
 80002ba:	4b6f      	ldr	r3, [pc, #444]	; (8000478 <fsm_automatic_run1+0x2d4>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002c2:	fb02 f303 	mul.w	r3, r2, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 f942 	bl	8001550 <setTimer1>
				LANE1_STATUS = LANE1_GREEN;
 80002cc:	4b69      	ldr	r3, [pc, #420]	; (8000474 <fsm_automatic_run1+0x2d0>)
 80002ce:	2203      	movs	r2, #3
 80002d0:	601a      	str	r2, [r3, #0]
				countDownRed1 = 0; //reset
 80002d2:	4b6c      	ldr	r3, [pc, #432]	; (8000484 <fsm_automatic_run1+0x2e0>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
				timer4_flag = 1;
 80002d8:	4b68      	ldr	r3, [pc, #416]	; (800047c <fsm_automatic_run1+0x2d8>)
 80002da:	2201      	movs	r2, #1
 80002dc:	601a      	str	r2, [r3, #0]
				led7SegState = 1; //
 80002de:	4b68      	ldr	r3, [pc, #416]	; (8000480 <fsm_automatic_run1+0x2dc>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	601a      	str	r2, [r3, #0]
			}
			break;
 80002e4:	e103      	b.n	80004ee <fsm_automatic_run1+0x34a>
		case LANE1_GREEN:
			setTrafficGreen1();
 80002e6:	f000 ffc7 	bl	8001278 <setTrafficGreen1>
			if (timer4_flag == 1) {
 80002ea:	4b64      	ldr	r3, [pc, #400]	; (800047c <fsm_automatic_run1+0x2d8>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d155      	bne.n	800039e <fsm_automatic_run1+0x1fa>
				switch(led7SegState) {
 80002f2:	4b63      	ldr	r3, [pc, #396]	; (8000480 <fsm_automatic_run1+0x2dc>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	3b01      	subs	r3, #1
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d851      	bhi.n	80003a0 <fsm_automatic_run1+0x1fc>
 80002fc:	a201      	add	r2, pc, #4	; (adr r2, 8000304 <fsm_automatic_run1+0x160>)
 80002fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000302:	bf00      	nop
 8000304:	08000315 	.word	0x08000315
 8000308:	08000343 	.word	0x08000343
 800030c:	08000371 	.word	0x08000371
 8000310:	08000383 	.word	0x08000383
				case 1:
					enableLed7Seg1();
 8000314:	f000 fee0 	bl	80010d8 <enableLed7Seg1>
					display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[2]-countDownGreen1)]);
 8000318:	4b57      	ldr	r3, [pc, #348]	; (8000478 <fsm_automatic_run1+0x2d4>)
 800031a:	689a      	ldr	r2, [r3, #8]
 800031c:	4b5c      	ldr	r3, [pc, #368]	; (8000490 <fsm_automatic_run1+0x2ec>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	1ad3      	subs	r3, r2, r3
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff12 	bl	800014c <getTimeAtIndex0>
 8000328:	4603      	mov	r3, r0
 800032a:	4a57      	ldr	r2, [pc, #348]	; (8000488 <fsm_automatic_run1+0x2e4>)
 800032c:	5cd3      	ldrb	r3, [r2, r3]
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fe60 	bl	8000ff4 <display7SEG_1>
					setTimer4(250);
 8000334:	20fa      	movs	r0, #250	; 0xfa
 8000336:	f001 f95f 	bl	80015f8 <setTimer4>
					led7SegState = 2;
 800033a:	4b51      	ldr	r3, [pc, #324]	; (8000480 <fsm_automatic_run1+0x2dc>)
 800033c:	2202      	movs	r2, #2
 800033e:	601a      	str	r2, [r3, #0]
					break;
 8000340:	e02e      	b.n	80003a0 <fsm_automatic_run1+0x1fc>
				case 2:
					enableLed7Seg2();
 8000342:	f000 fee7 	bl	8001114 <enableLed7Seg2>
					display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[2]-countDownGreen1)]);
 8000346:	4b4c      	ldr	r3, [pc, #304]	; (8000478 <fsm_automatic_run1+0x2d4>)
 8000348:	689a      	ldr	r2, [r3, #8]
 800034a:	4b51      	ldr	r3, [pc, #324]	; (8000490 <fsm_automatic_run1+0x2ec>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff0f 	bl	8000174 <getTimeAtIndex1>
 8000356:	4603      	mov	r3, r0
 8000358:	4a4b      	ldr	r2, [pc, #300]	; (8000488 <fsm_automatic_run1+0x2e4>)
 800035a:	5cd3      	ldrb	r3, [r2, r3]
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fe49 	bl	8000ff4 <display7SEG_1>
					setTimer4(250);
 8000362:	20fa      	movs	r0, #250	; 0xfa
 8000364:	f001 f948 	bl	80015f8 <setTimer4>
					led7SegState = 3;
 8000368:	4b45      	ldr	r3, [pc, #276]	; (8000480 <fsm_automatic_run1+0x2dc>)
 800036a:	2203      	movs	r2, #3
 800036c:	601a      	str	r2, [r3, #0]
					break;
 800036e:	e017      	b.n	80003a0 <fsm_automatic_run1+0x1fc>
				case 3:
					enableLed7Seg3();
 8000370:	f000 feee 	bl	8001150 <enableLed7Seg3>
					setTimer4(250);
 8000374:	20fa      	movs	r0, #250	; 0xfa
 8000376:	f001 f93f 	bl	80015f8 <setTimer4>
					led7SegState = 4;
 800037a:	4b41      	ldr	r3, [pc, #260]	; (8000480 <fsm_automatic_run1+0x2dc>)
 800037c:	2204      	movs	r2, #4
 800037e:	601a      	str	r2, [r3, #0]
					break;
 8000380:	e00e      	b.n	80003a0 <fsm_automatic_run1+0x1fc>
				case 4:
					enableLed7Seg4();
 8000382:	f000 ff03 	bl	800118c <enableLed7Seg4>
					countDownGreen1++;
 8000386:	4b42      	ldr	r3, [pc, #264]	; (8000490 <fsm_automatic_run1+0x2ec>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	4a40      	ldr	r2, [pc, #256]	; (8000490 <fsm_automatic_run1+0x2ec>)
 800038e:	6013      	str	r3, [r2, #0]
					setTimer4(250);
 8000390:	20fa      	movs	r0, #250	; 0xfa
 8000392:	f001 f931 	bl	80015f8 <setTimer4>
					led7SegState = 1;
 8000396:	4b3a      	ldr	r3, [pc, #232]	; (8000480 <fsm_automatic_run1+0x2dc>)
 8000398:	2201      	movs	r2, #1
 800039a:	601a      	str	r2, [r3, #0]
					break;
 800039c:	e000      	b.n	80003a0 <fsm_automatic_run1+0x1fc>
				}
			}
 800039e:	bf00      	nop
			if(timer1_flag == 1) {
 80003a0:	4b3a      	ldr	r3, [pc, #232]	; (800048c <fsm_automatic_run1+0x2e8>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	f040 80a4 	bne.w	80004f2 <fsm_automatic_run1+0x34e>
				setTimer1(led_duration[1]*1000); //
 80003aa:	4b33      	ldr	r3, [pc, #204]	; (8000478 <fsm_automatic_run1+0x2d4>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003b2:	fb02 f303 	mul.w	r3, r2, r3
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 f8ca 	bl	8001550 <setTimer1>
				LANE1_STATUS = LANE1_YELLOW;
 80003bc:	4b2d      	ldr	r3, [pc, #180]	; (8000474 <fsm_automatic_run1+0x2d0>)
 80003be:	2204      	movs	r2, #4
 80003c0:	601a      	str	r2, [r3, #0]
				countDownGreen1 = 0; //reset
 80003c2:	4b33      	ldr	r3, [pc, #204]	; (8000490 <fsm_automatic_run1+0x2ec>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
				timer4_flag = 1;
 80003c8:	4b2c      	ldr	r3, [pc, #176]	; (800047c <fsm_automatic_run1+0x2d8>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	601a      	str	r2, [r3, #0]
				led7SegState = 1;//
 80003ce:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <fsm_automatic_run1+0x2dc>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	601a      	str	r2, [r3, #0]
			}
			break;
 80003d4:	e08d      	b.n	80004f2 <fsm_automatic_run1+0x34e>
		case LANE1_YELLOW:
			setTrafficYellow1();
 80003d6:	f000 ff7b 	bl	80012d0 <setTrafficYellow1>
			if (timer4_flag == 1) {
 80003da:	4b28      	ldr	r3, [pc, #160]	; (800047c <fsm_automatic_run1+0x2d8>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d168      	bne.n	80004b4 <fsm_automatic_run1+0x310>
				switch(led7SegState) {
 80003e2:	4b27      	ldr	r3, [pc, #156]	; (8000480 <fsm_automatic_run1+0x2dc>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	3b01      	subs	r3, #1
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	d864      	bhi.n	80004b6 <fsm_automatic_run1+0x312>
 80003ec:	a201      	add	r2, pc, #4	; (adr r2, 80003f4 <fsm_automatic_run1+0x250>)
 80003ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f2:	bf00      	nop
 80003f4:	08000405 	.word	0x08000405
 80003f8:	08000433 	.word	0x08000433
 80003fc:	08000461 	.word	0x08000461
 8000400:	08000499 	.word	0x08000499
				case 1:
				enableLed7Seg1();
 8000404:	f000 fe68 	bl	80010d8 <enableLed7Seg1>
				display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[1]-countDownYellow1)]);
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <fsm_automatic_run1+0x2d4>)
 800040a:	685a      	ldr	r2, [r3, #4]
 800040c:	4b21      	ldr	r3, [pc, #132]	; (8000494 <fsm_automatic_run1+0x2f0>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff fe9a 	bl	800014c <getTimeAtIndex0>
 8000418:	4603      	mov	r3, r0
 800041a:	4a1b      	ldr	r2, [pc, #108]	; (8000488 <fsm_automatic_run1+0x2e4>)
 800041c:	5cd3      	ldrb	r3, [r2, r3]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fde8 	bl	8000ff4 <display7SEG_1>
				setTimer4(250);
 8000424:	20fa      	movs	r0, #250	; 0xfa
 8000426:	f001 f8e7 	bl	80015f8 <setTimer4>
				led7SegState = 2;
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <fsm_automatic_run1+0x2dc>)
 800042c:	2202      	movs	r2, #2
 800042e:	601a      	str	r2, [r3, #0]
					break;
 8000430:	e041      	b.n	80004b6 <fsm_automatic_run1+0x312>
				case 2:
					enableLed7Seg2();
 8000432:	f000 fe6f 	bl	8001114 <enableLed7Seg2>
					display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[1]-countDownYellow1)]);
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <fsm_automatic_run1+0x2d4>)
 8000438:	685a      	ldr	r2, [r3, #4]
 800043a:	4b16      	ldr	r3, [pc, #88]	; (8000494 <fsm_automatic_run1+0x2f0>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff fe97 	bl	8000174 <getTimeAtIndex1>
 8000446:	4603      	mov	r3, r0
 8000448:	4a0f      	ldr	r2, [pc, #60]	; (8000488 <fsm_automatic_run1+0x2e4>)
 800044a:	5cd3      	ldrb	r3, [r2, r3]
 800044c:	4618      	mov	r0, r3
 800044e:	f000 fdd1 	bl	8000ff4 <display7SEG_1>
					setTimer4(250);
 8000452:	20fa      	movs	r0, #250	; 0xfa
 8000454:	f001 f8d0 	bl	80015f8 <setTimer4>
					led7SegState = 3;
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <fsm_automatic_run1+0x2dc>)
 800045a:	2203      	movs	r2, #3
 800045c:	601a      	str	r2, [r3, #0]
					break;
 800045e:	e02a      	b.n	80004b6 <fsm_automatic_run1+0x312>
				case 3:
					enableLed7Seg3();
 8000460:	f000 fe76 	bl	8001150 <enableLed7Seg3>
					setTimer4(250);
 8000464:	20fa      	movs	r0, #250	; 0xfa
 8000466:	f001 f8c7 	bl	80015f8 <setTimer4>
					led7SegState = 4;
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <fsm_automatic_run1+0x2dc>)
 800046c:	2204      	movs	r2, #4
 800046e:	601a      	str	r2, [r3, #0]
					break;
 8000470:	e021      	b.n	80004b6 <fsm_automatic_run1+0x312>
 8000472:	bf00      	nop
 8000474:	20000008 	.word	0x20000008
 8000478:	20000010 	.word	0x20000010
 800047c:	200000e0 	.word	0x200000e0
 8000480:	20000000 	.word	0x20000000
 8000484:	20000090 	.word	0x20000090
 8000488:	2000005c 	.word	0x2000005c
 800048c:	200000c8 	.word	0x200000c8
 8000490:	20000098 	.word	0x20000098
 8000494:	20000094 	.word	0x20000094
				case 4:
					enableLed7Seg4();
 8000498:	f000 fe78 	bl	800118c <enableLed7Seg4>
					countDownYellow1++;
 800049c:	4b17      	ldr	r3, [pc, #92]	; (80004fc <fsm_automatic_run1+0x358>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3301      	adds	r3, #1
 80004a2:	4a16      	ldr	r2, [pc, #88]	; (80004fc <fsm_automatic_run1+0x358>)
 80004a4:	6013      	str	r3, [r2, #0]
					setTimer4(250);
 80004a6:	20fa      	movs	r0, #250	; 0xfa
 80004a8:	f001 f8a6 	bl	80015f8 <setTimer4>
					led7SegState = 1;
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <fsm_automatic_run1+0x35c>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	601a      	str	r2, [r3, #0]
					break;
 80004b2:	e000      	b.n	80004b6 <fsm_automatic_run1+0x312>
				}
			}
 80004b4:	bf00      	nop
			if(timer1_flag == 1) {
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <fsm_automatic_run1+0x360>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d11b      	bne.n	80004f6 <fsm_automatic_run1+0x352>
				setTimer1(led_duration[0]*1000); //
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <fsm_automatic_run1+0x364>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004c6:	fb02 f303 	mul.w	r3, r2, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 f840 	bl	8001550 <setTimer1>
				LANE1_STATUS = LANE1_RED;
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <fsm_automatic_run1+0x368>)
 80004d2:	2202      	movs	r2, #2
 80004d4:	601a      	str	r2, [r3, #0]
				countDownYellow1 = 0; //reset
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <fsm_automatic_run1+0x358>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
				timer4_flag = 1;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <fsm_automatic_run1+0x36c>)
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
				led7SegState = 1;//
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <fsm_automatic_run1+0x35c>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	601a      	str	r2, [r3, #0]
			}
			break;
 80004e8:	e005      	b.n	80004f6 <fsm_automatic_run1+0x352>
					break;
 80004ea:	bf00      	nop
 80004ec:	e004      	b.n	80004f8 <fsm_automatic_run1+0x354>
			break;
 80004ee:	bf00      	nop
 80004f0:	e002      	b.n	80004f8 <fsm_automatic_run1+0x354>
			break;
 80004f2:	bf00      	nop
 80004f4:	e000      	b.n	80004f8 <fsm_automatic_run1+0x354>
			break;
 80004f6:	bf00      	nop
	}
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000094 	.word	0x20000094
 8000500:	20000000 	.word	0x20000000
 8000504:	200000c8 	.word	0x200000c8
 8000508:	20000010 	.word	0x20000010
 800050c:	20000008 	.word	0x20000008
 8000510:	200000e0 	.word	0x200000e0

08000514 <fsm_automatic_run2>:

void fsm_automatic_run2() {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	switch(LANE2_STATUS) { //for lane 2
 8000518:	4bab      	ldr	r3, [pc, #684]	; (80007c8 <fsm_automatic_run2+0x2b4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3b0b      	subs	r3, #11
 800051e:	2b03      	cmp	r3, #3
 8000520:	f200 81a0 	bhi.w	8000864 <fsm_automatic_run2+0x350>
 8000524:	a201      	add	r2, pc, #4	; (adr r2, 800052c <fsm_automatic_run2+0x18>)
 8000526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052a:	bf00      	nop
 800052c:	0800053d 	.word	0x0800053d
 8000530:	08000567 	.word	0x08000567
 8000534:	08000657 	.word	0x08000657
 8000538:	08000747 	.word	0x08000747
		case LANE2_INIT:
			initTrafficLight2();
 800053c:	f000 fe5a 	bl	80011f4 <initTrafficLight2>
			LANE2_STATUS = LANE2_GREEN;
 8000540:	4ba1      	ldr	r3, [pc, #644]	; (80007c8 <fsm_automatic_run2+0x2b4>)
 8000542:	220d      	movs	r2, #13
 8000544:	601a      	str	r2, [r3, #0]
			setTimer2(led_duration[2]*1000);
 8000546:	4ba1      	ldr	r3, [pc, #644]	; (80007cc <fsm_automatic_run2+0x2b8>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800054e:	fb02 f303 	mul.w	r3, r2, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f001 f818 	bl	8001588 <setTimer2>
			timer3_flag = 1; //
 8000558:	4b9d      	ldr	r3, [pc, #628]	; (80007d0 <fsm_automatic_run2+0x2bc>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
			led7SegState2 = 1;
 800055e:	4b9d      	ldr	r3, [pc, #628]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 8000560:	2201      	movs	r2, #1
 8000562:	601a      	str	r2, [r3, #0]
			break;
 8000564:	e17e      	b.n	8000864 <fsm_automatic_run2+0x350>
		case LANE2_RED:
			setTrafficRed2();
 8000566:	f000 fe71 	bl	800124c <setTrafficRed2>
			if (timer3_flag == 1) {
 800056a:	4b99      	ldr	r3, [pc, #612]	; (80007d0 <fsm_automatic_run2+0x2bc>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d155      	bne.n	800061e <fsm_automatic_run2+0x10a>
				switch(led7SegState2) {
 8000572:	4b98      	ldr	r3, [pc, #608]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	3b01      	subs	r3, #1
 8000578:	2b03      	cmp	r3, #3
 800057a:	d851      	bhi.n	8000620 <fsm_automatic_run2+0x10c>
 800057c:	a201      	add	r2, pc, #4	; (adr r2, 8000584 <fsm_automatic_run2+0x70>)
 800057e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000582:	bf00      	nop
 8000584:	08000595 	.word	0x08000595
 8000588:	080005a7 	.word	0x080005a7
 800058c:	080005b9 	.word	0x080005b9
 8000590:	080005e7 	.word	0x080005e7
				case 1:
					enableLed7Seg1();
 8000594:	f000 fda0 	bl	80010d8 <enableLed7Seg1>
					setTimer3(250);
 8000598:	20fa      	movs	r0, #250	; 0xfa
 800059a:	f001 f811 	bl	80015c0 <setTimer3>
					led7SegState2 = 2;
 800059e:	4b8d      	ldr	r3, [pc, #564]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 80005a0:	2202      	movs	r2, #2
 80005a2:	601a      	str	r2, [r3, #0]
					break;
 80005a4:	e03c      	b.n	8000620 <fsm_automatic_run2+0x10c>
				case 2:
					enableLed7Seg2();
 80005a6:	f000 fdb5 	bl	8001114 <enableLed7Seg2>
					setTimer3(250);
 80005aa:	20fa      	movs	r0, #250	; 0xfa
 80005ac:	f001 f808 	bl	80015c0 <setTimer3>
					led7SegState2 = 3;
 80005b0:	4b88      	ldr	r3, [pc, #544]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 80005b2:	2203      	movs	r2, #3
 80005b4:	601a      	str	r2, [r3, #0]
					break;
 80005b6:	e033      	b.n	8000620 <fsm_automatic_run2+0x10c>
				case 3:
					display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[0]-countDownRed2)]);
 80005b8:	4b84      	ldr	r3, [pc, #528]	; (80007cc <fsm_automatic_run2+0x2b8>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b86      	ldr	r3, [pc, #536]	; (80007d8 <fsm_automatic_run2+0x2c4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fdc2 	bl	800014c <getTimeAtIndex0>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a84      	ldr	r2, [pc, #528]	; (80007dc <fsm_automatic_run2+0x2c8>)
 80005cc:	5cd3      	ldrb	r3, [r2, r3]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fd10 	bl	8000ff4 <display7SEG_1>
					enableLed7Seg3();
 80005d4:	f000 fdbc 	bl	8001150 <enableLed7Seg3>
					setTimer3(250);
 80005d8:	20fa      	movs	r0, #250	; 0xfa
 80005da:	f000 fff1 	bl	80015c0 <setTimer3>
					led7SegState2 = 4;
 80005de:	4b7d      	ldr	r3, [pc, #500]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	601a      	str	r2, [r3, #0]
					break;
 80005e4:	e01c      	b.n	8000620 <fsm_automatic_run2+0x10c>
				case 4:
					display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[0]-countDownRed2)]);
 80005e6:	4b79      	ldr	r3, [pc, #484]	; (80007cc <fsm_automatic_run2+0x2b8>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b7b      	ldr	r3, [pc, #492]	; (80007d8 <fsm_automatic_run2+0x2c4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fdbf 	bl	8000174 <getTimeAtIndex1>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a78      	ldr	r2, [pc, #480]	; (80007dc <fsm_automatic_run2+0x2c8>)
 80005fa:	5cd3      	ldrb	r3, [r2, r3]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fcf9 	bl	8000ff4 <display7SEG_1>
					enableLed7Seg4();
 8000602:	f000 fdc3 	bl	800118c <enableLed7Seg4>
					countDownRed2++;
 8000606:	4b74      	ldr	r3, [pc, #464]	; (80007d8 <fsm_automatic_run2+0x2c4>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3301      	adds	r3, #1
 800060c:	4a72      	ldr	r2, [pc, #456]	; (80007d8 <fsm_automatic_run2+0x2c4>)
 800060e:	6013      	str	r3, [r2, #0]
					setTimer3(250);
 8000610:	20fa      	movs	r0, #250	; 0xfa
 8000612:	f000 ffd5 	bl	80015c0 <setTimer3>
					led7SegState2 = 1;
 8000616:	4b6f      	ldr	r3, [pc, #444]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 8000618:	2201      	movs	r2, #1
 800061a:	601a      	str	r2, [r3, #0]
					break;
 800061c:	e000      	b.n	8000620 <fsm_automatic_run2+0x10c>
				}
			}
 800061e:	bf00      	nop
			if(timer2_flag == 1) {
 8000620:	4b6f      	ldr	r3, [pc, #444]	; (80007e0 <fsm_automatic_run2+0x2cc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	f040 8118 	bne.w	800085a <fsm_automatic_run2+0x346>
				setTimer2(led_duration[2]*1000);
 800062a:	4b68      	ldr	r3, [pc, #416]	; (80007cc <fsm_automatic_run2+0x2b8>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000632:	fb02 f303 	mul.w	r3, r2, r3
 8000636:	4618      	mov	r0, r3
 8000638:	f000 ffa6 	bl	8001588 <setTimer2>
				LANE2_STATUS = LANE2_GREEN;
 800063c:	4b62      	ldr	r3, [pc, #392]	; (80007c8 <fsm_automatic_run2+0x2b4>)
 800063e:	220d      	movs	r2, #13
 8000640:	601a      	str	r2, [r3, #0]
				countDownRed2 = 0; //reset
 8000642:	4b65      	ldr	r3, [pc, #404]	; (80007d8 <fsm_automatic_run2+0x2c4>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
				led7SegState2 = 1; //
 8000648:	4b62      	ldr	r3, [pc, #392]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 800064a:	2201      	movs	r2, #1
 800064c:	601a      	str	r2, [r3, #0]
				timer3_flag = 1;
 800064e:	4b60      	ldr	r3, [pc, #384]	; (80007d0 <fsm_automatic_run2+0x2bc>)
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
			}
			break;
 8000654:	e101      	b.n	800085a <fsm_automatic_run2+0x346>
		case LANE2_GREEN:
			setTrafficGreen2();
 8000656:	f000 fe25 	bl	80012a4 <setTrafficGreen2>
			if (timer3_flag == 1) {
 800065a:	4b5d      	ldr	r3, [pc, #372]	; (80007d0 <fsm_automatic_run2+0x2bc>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d155      	bne.n	800070e <fsm_automatic_run2+0x1fa>
				switch(led7SegState2) {
 8000662:	4b5c      	ldr	r3, [pc, #368]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3b01      	subs	r3, #1
 8000668:	2b03      	cmp	r3, #3
 800066a:	d851      	bhi.n	8000710 <fsm_automatic_run2+0x1fc>
 800066c:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <fsm_automatic_run2+0x160>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	08000685 	.word	0x08000685
 8000678:	08000697 	.word	0x08000697
 800067c:	080006a9 	.word	0x080006a9
 8000680:	080006d7 	.word	0x080006d7
				case 1:
					//todo
						enableLed7Seg1();
 8000684:	f000 fd28 	bl	80010d8 <enableLed7Seg1>
						setTimer3(250);
 8000688:	20fa      	movs	r0, #250	; 0xfa
 800068a:	f000 ff99 	bl	80015c0 <setTimer3>
						led7SegState2 = 2;
 800068e:	4b51      	ldr	r3, [pc, #324]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 8000690:	2202      	movs	r2, #2
 8000692:	601a      	str	r2, [r3, #0]
					break;
 8000694:	e03c      	b.n	8000710 <fsm_automatic_run2+0x1fc>
				case 2:
					//todo
						enableLed7Seg2();
 8000696:	f000 fd3d 	bl	8001114 <enableLed7Seg2>
						setTimer3(250);
 800069a:	20fa      	movs	r0, #250	; 0xfa
 800069c:	f000 ff90 	bl	80015c0 <setTimer3>
						led7SegState2 = 3;
 80006a0:	4b4c      	ldr	r3, [pc, #304]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 80006a2:	2203      	movs	r2, #3
 80006a4:	601a      	str	r2, [r3, #0]
					break;
 80006a6:	e033      	b.n	8000710 <fsm_automatic_run2+0x1fc>
				case 3:
						display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[2]-countDownGreen2)]);
 80006a8:	4b48      	ldr	r3, [pc, #288]	; (80007cc <fsm_automatic_run2+0x2b8>)
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	4b4d      	ldr	r3, [pc, #308]	; (80007e4 <fsm_automatic_run2+0x2d0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fd4a 	bl	800014c <getTimeAtIndex0>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a48      	ldr	r2, [pc, #288]	; (80007dc <fsm_automatic_run2+0x2c8>)
 80006bc:	5cd3      	ldrb	r3, [r2, r3]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fc98 	bl	8000ff4 <display7SEG_1>
						enableLed7Seg3();
 80006c4:	f000 fd44 	bl	8001150 <enableLed7Seg3>
						setTimer3(250);
 80006c8:	20fa      	movs	r0, #250	; 0xfa
 80006ca:	f000 ff79 	bl	80015c0 <setTimer3>
						led7SegState2 = 4;
 80006ce:	4b41      	ldr	r3, [pc, #260]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 80006d0:	2204      	movs	r2, #4
 80006d2:	601a      	str	r2, [r3, #0]
					break;
 80006d4:	e01c      	b.n	8000710 <fsm_automatic_run2+0x1fc>
				case 4:
					//todo
						display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[2]-countDownGreen2)]);
 80006d6:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <fsm_automatic_run2+0x2b8>)
 80006d8:	689a      	ldr	r2, [r3, #8]
 80006da:	4b42      	ldr	r3, [pc, #264]	; (80007e4 <fsm_automatic_run2+0x2d0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fd47 	bl	8000174 <getTimeAtIndex1>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a3c      	ldr	r2, [pc, #240]	; (80007dc <fsm_automatic_run2+0x2c8>)
 80006ea:	5cd3      	ldrb	r3, [r2, r3]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fc81 	bl	8000ff4 <display7SEG_1>
						enableLed7Seg4();
 80006f2:	f000 fd4b 	bl	800118c <enableLed7Seg4>
						countDownGreen2++;
 80006f6:	4b3b      	ldr	r3, [pc, #236]	; (80007e4 <fsm_automatic_run2+0x2d0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	4a39      	ldr	r2, [pc, #228]	; (80007e4 <fsm_automatic_run2+0x2d0>)
 80006fe:	6013      	str	r3, [r2, #0]
						setTimer3(250);
 8000700:	20fa      	movs	r0, #250	; 0xfa
 8000702:	f000 ff5d 	bl	80015c0 <setTimer3>
						led7SegState2 = 1;
 8000706:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
					break;
 800070c:	e000      	b.n	8000710 <fsm_automatic_run2+0x1fc>
				}
			}
 800070e:	bf00      	nop
			if(timer2_flag == 1) {
 8000710:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <fsm_automatic_run2+0x2cc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	f040 80a2 	bne.w	800085e <fsm_automatic_run2+0x34a>
				setTimer2(led_duration[1]*1000); //
 800071a:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <fsm_automatic_run2+0x2b8>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000722:	fb02 f303 	mul.w	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f000 ff2e 	bl	8001588 <setTimer2>
				LANE2_STATUS = LANE2_YELLOW;
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <fsm_automatic_run2+0x2b4>)
 800072e:	220e      	movs	r2, #14
 8000730:	601a      	str	r2, [r3, #0]
				countDownGreen2 = 0; //reset
 8000732:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <fsm_automatic_run2+0x2d0>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
				led7SegState2 = 1;//
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]
				timer3_flag = 1;
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <fsm_automatic_run2+0x2bc>)
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
			}
			break;
 8000744:	e08b      	b.n	800085e <fsm_automatic_run2+0x34a>
		case LANE2_YELLOW:
			setTrafficYellow2();
 8000746:	f000 fdd9 	bl	80012fc <setTrafficYellow2>
			if (timer3_flag == 1) {
 800074a:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <fsm_automatic_run2+0x2bc>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d168      	bne.n	8000824 <fsm_automatic_run2+0x310>
				switch(led7SegState2) {
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3b01      	subs	r3, #1
 8000758:	2b03      	cmp	r3, #3
 800075a:	d864      	bhi.n	8000826 <fsm_automatic_run2+0x312>
 800075c:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <fsm_automatic_run2+0x250>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	08000775 	.word	0x08000775
 8000768:	08000787 	.word	0x08000787
 800076c:	08000799 	.word	0x08000799
 8000770:	080007ed 	.word	0x080007ed
				case 1:
					//todo
									enableLed7Seg1();
 8000774:	f000 fcb0 	bl	80010d8 <enableLed7Seg1>
						setTimer3(250);
 8000778:	20fa      	movs	r0, #250	; 0xfa
 800077a:	f000 ff21 	bl	80015c0 <setTimer3>
						led7SegState2 = 2;
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 8000780:	2202      	movs	r2, #2
 8000782:	601a      	str	r2, [r3, #0]
					break;
 8000784:	e04f      	b.n	8000826 <fsm_automatic_run2+0x312>
				case 2:
					//todo
									enableLed7Seg2();
 8000786:	f000 fcc5 	bl	8001114 <enableLed7Seg2>
						setTimer3(250);
 800078a:	20fa      	movs	r0, #250	; 0xfa
 800078c:	f000 ff18 	bl	80015c0 <setTimer3>
						led7SegState2 = 3;
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 8000792:	2203      	movs	r2, #3
 8000794:	601a      	str	r2, [r3, #0]
					break;
 8000796:	e046      	b.n	8000826 <fsm_automatic_run2+0x312>
				case 3:
						display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[1]-countDownYellow2)]);
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <fsm_automatic_run2+0x2b8>)
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <fsm_automatic_run2+0x2d4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fcd2 	bl	800014c <getTimeAtIndex0>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <fsm_automatic_run2+0x2c8>)
 80007ac:	5cd3      	ldrb	r3, [r2, r3]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fc20 	bl	8000ff4 <display7SEG_1>
						enableLed7Seg3();
 80007b4:	f000 fccc 	bl	8001150 <enableLed7Seg3>
						setTimer3(250);
 80007b8:	20fa      	movs	r0, #250	; 0xfa
 80007ba:	f000 ff01 	bl	80015c0 <setTimer3>
						led7SegState2 = 4;
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <fsm_automatic_run2+0x2c0>)
 80007c0:	2204      	movs	r2, #4
 80007c2:	601a      	str	r2, [r3, #0]
					break;
 80007c4:	e02f      	b.n	8000826 <fsm_automatic_run2+0x312>
 80007c6:	bf00      	nop
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	20000010 	.word	0x20000010
 80007d0:	200000d8 	.word	0x200000d8
 80007d4:	20000004 	.word	0x20000004
 80007d8:	2000009c 	.word	0x2000009c
 80007dc:	2000005c 	.word	0x2000005c
 80007e0:	200000d0 	.word	0x200000d0
 80007e4:	200000a4 	.word	0x200000a4
 80007e8:	200000a0 	.word	0x200000a0
				case 4:
					//todo
						display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[1]-countDownYellow2)]);
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <fsm_automatic_run2+0x354>)
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <fsm_automatic_run2+0x358>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fcbc 	bl	8000174 <getTimeAtIndex1>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <fsm_automatic_run2+0x35c>)
 8000800:	5cd3      	ldrb	r3, [r2, r3]
 8000802:	4618      	mov	r0, r3
 8000804:	f000 fbf6 	bl	8000ff4 <display7SEG_1>
						enableLed7Seg4();
 8000808:	f000 fcc0 	bl	800118c <enableLed7Seg4>
						countDownYellow2++;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <fsm_automatic_run2+0x358>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	4a16      	ldr	r2, [pc, #88]	; (800086c <fsm_automatic_run2+0x358>)
 8000814:	6013      	str	r3, [r2, #0]
						setTimer3(250);
 8000816:	20fa      	movs	r0, #250	; 0xfa
 8000818:	f000 fed2 	bl	80015c0 <setTimer3>
						led7SegState2 = 1;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <fsm_automatic_run2+0x360>)
 800081e:	2201      	movs	r2, #1
 8000820:	601a      	str	r2, [r3, #0]
					break;
 8000822:	e000      	b.n	8000826 <fsm_automatic_run2+0x312>
				}
			}
 8000824:	bf00      	nop

			if(timer2_flag == 1) {
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <fsm_automatic_run2+0x364>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d119      	bne.n	8000862 <fsm_automatic_run2+0x34e>
				setTimer2(led_duration[0]*1000);
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <fsm_automatic_run2+0x354>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000836:	fb02 f303 	mul.w	r3, r2, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fea4 	bl	8001588 <setTimer2>
				LANE2_STATUS = LANE2_RED;
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <fsm_automatic_run2+0x368>)
 8000842:	220c      	movs	r2, #12
 8000844:	601a      	str	r2, [r3, #0]
				countDownYellow2 = 0; //reset
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <fsm_automatic_run2+0x358>)
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
				led7SegState2 = 1;//
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <fsm_automatic_run2+0x360>)
 800084e:	2201      	movs	r2, #1
 8000850:	601a      	str	r2, [r3, #0]
//				setTimer3(750);
				timer3_flag = 1;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <fsm_automatic_run2+0x36c>)
 8000854:	2201      	movs	r2, #1
 8000856:	601a      	str	r2, [r3, #0]
			}
			break;
 8000858:	e003      	b.n	8000862 <fsm_automatic_run2+0x34e>
			break;
 800085a:	bf00      	nop
 800085c:	e002      	b.n	8000864 <fsm_automatic_run2+0x350>
			break;
 800085e:	bf00      	nop
 8000860:	e000      	b.n	8000864 <fsm_automatic_run2+0x350>
			break;
 8000862:	bf00      	nop
	}
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000010 	.word	0x20000010
 800086c:	200000a0 	.word	0x200000a0
 8000870:	2000005c 	.word	0x2000005c
 8000874:	20000004 	.word	0x20000004
 8000878:	200000d0 	.word	0x200000d0
 800087c:	2000000c 	.word	0x2000000c
 8000880:	200000d8 	.word	0x200000d8

08000884 <fsm_for_input_processing>:
int counterForGreen = 0;
int counterForYellow = 0;
int flag = 0;

int led7SegScanning = 1;
void fsm_for_input_processing(void){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	switch(buttonState){
 8000888:	4ba9      	ldr	r3, [pc, #676]	; (8000b30 <fsm_for_input_processing+0x2ac>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b03      	cmp	r3, #3
 800088e:	f200 8257 	bhi.w	8000d40 <fsm_for_input_processing+0x4bc>
 8000892:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <fsm_for_input_processing+0x14>)
 8000894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000898:	080008a9 	.word	0x080008a9
 800089c:	08000a51 	.word	0x08000a51
 80008a0:	08000a5d 	.word	0x08000a5d
 80008a4:	08000bfd 	.word	0x08000bfd
		case NORMAL: //Mode 1
			//các led đơn và led7seg sáng bthg
			countDownGreen1 = 0;
 80008a8:	4ba2      	ldr	r3, [pc, #648]	; (8000b34 <fsm_for_input_processing+0x2b0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
			countDownGreen2 = 0;
 80008ae:	4ba2      	ldr	r3, [pc, #648]	; (8000b38 <fsm_for_input_processing+0x2b4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
			countDownRed1 = 0;
 80008b4:	4ba1      	ldr	r3, [pc, #644]	; (8000b3c <fsm_for_input_processing+0x2b8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
			countDownRed2 = 0;
 80008ba:	4ba1      	ldr	r3, [pc, #644]	; (8000b40 <fsm_for_input_processing+0x2bc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
			countDownYellow1 = 0;
 80008c0:	4ba0      	ldr	r3, [pc, #640]	; (8000b44 <fsm_for_input_processing+0x2c0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
			countDownYellow2 = 0;
 80008c6:	4ba0      	ldr	r3, [pc, #640]	; (8000b48 <fsm_for_input_processing+0x2c4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
			LANE1_STATUS = LANE1_INIT;
 80008cc:	4b9f      	ldr	r3, [pc, #636]	; (8000b4c <fsm_for_input_processing+0x2c8>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
			LANE2_STATUS = LANE2_INIT;
 80008d2:	4b9f      	ldr	r3, [pc, #636]	; (8000b50 <fsm_for_input_processing+0x2cc>)
 80008d4:	220b      	movs	r2, #11
 80008d6:	601a      	str	r2, [r3, #0]
			while(1) {
				fsm_automatic_run1();
 80008d8:	f7ff fc64 	bl	80001a4 <fsm_automatic_run1>
				fsm_automatic_run2();
 80008dc:	f7ff fe1a 	bl	8000514 <fsm_automatic_run2>
				if(isButton1Press() == 1) {
 80008e0:	f000 fa44 	bl	8000d6c <isButton1Press>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d1f6      	bne.n	80008d8 <fsm_for_input_processing+0x54>
					buttonState = SET_TIME_RED;
 80008ea:	4b91      	ldr	r3, [pc, #580]	; (8000b30 <fsm_for_input_processing+0x2ac>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
					timer1_flag = 1;
 80008f0:	4b98      	ldr	r3, [pc, #608]	; (8000b54 <fsm_for_input_processing+0x2d0>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	601a      	str	r2, [r3, #0]
					timer2_flag = 1; //for scanning led7seg
 80008f6:	4b98      	ldr	r3, [pc, #608]	; (8000b58 <fsm_for_input_processing+0x2d4>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	601a      	str	r2, [r3, #0]
					setTrafficRed1();
 80008fc:	f000 fc90 	bl	8001220 <setTrafficRed1>
					setTrafficRed2();
 8000900:	f000 fca4 	bl	800124c <setTrafficRed2>
					flag = 0; //reset
 8000904:	4b95      	ldr	r3, [pc, #596]	; (8000b5c <fsm_for_input_processing+0x2d8>)
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
					break;
 800090a:	bf00      	nop
				}
			}
			break;
 800090c:	e218      	b.n	8000d40 <fsm_for_input_processing+0x4bc>
		case SET_TIME_RED: //Mode 2
			//điều chỉnh duration cho led red
			while (flag == 0) {
				if (timer1_flag == 1) {
 800090e:	4b91      	ldr	r3, [pc, #580]	; (8000b54 <fsm_for_input_processing+0x2d0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d10b      	bne.n	800092e <fsm_for_input_processing+0xaa>
					setTimer1(500);
 8000916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800091a:	f000 fe19 	bl	8001550 <setTimer1>
					HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 800091e:	2102      	movs	r1, #2
 8000920:	488f      	ldr	r0, [pc, #572]	; (8000b60 <fsm_for_input_processing+0x2dc>)
 8000922:	f001 fabc 	bl	8001e9e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000926:	2110      	movs	r1, #16
 8000928:	488d      	ldr	r0, [pc, #564]	; (8000b60 <fsm_for_input_processing+0x2dc>)
 800092a:	f001 fab8 	bl	8001e9e <HAL_GPIO_TogglePin>
				}
				if (timer2_flag == 1) {
 800092e:	4b8a      	ldr	r3, [pc, #552]	; (8000b58 <fsm_for_input_processing+0x2d4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d150      	bne.n	80009d8 <fsm_for_input_processing+0x154>
					setTimer2(250);
 8000936:	20fa      	movs	r0, #250	; 0xfa
 8000938:	f000 fe26 	bl	8001588 <setTimer2>
					switch(led7SegScanning) {
 800093c:	4b89      	ldr	r3, [pc, #548]	; (8000b64 <fsm_for_input_processing+0x2e0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3b01      	subs	r3, #1
 8000942:	2b03      	cmp	r3, #3
 8000944:	d849      	bhi.n	80009da <fsm_for_input_processing+0x156>
 8000946:	a201      	add	r2, pc, #4	; (adr r2, 800094c <fsm_for_input_processing+0xc8>)
 8000948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094c:	0800095d 	.word	0x0800095d
 8000950:	08000973 	.word	0x08000973
 8000954:	08000989 	.word	0x08000989
 8000958:	080009b1 	.word	0x080009b1
						case 1:
							enableLed7Seg1();
 800095c:	f000 fbbc 	bl	80010d8 <enableLed7Seg1>
							display7SEG_1(segmentNumber[0]);
 8000960:	4b81      	ldr	r3, [pc, #516]	; (8000b68 <fsm_for_input_processing+0x2e4>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fb45 	bl	8000ff4 <display7SEG_1>
							led7SegScanning = 2;
 800096a:	4b7e      	ldr	r3, [pc, #504]	; (8000b64 <fsm_for_input_processing+0x2e0>)
 800096c:	2202      	movs	r2, #2
 800096e:	601a      	str	r2, [r3, #0]
							break;
 8000970:	e033      	b.n	80009da <fsm_for_input_processing+0x156>
						case 2:
							enableLed7Seg2();
 8000972:	f000 fbcf 	bl	8001114 <enableLed7Seg2>
							display7SEG_1(segmentNumber[2]);
 8000976:	4b7c      	ldr	r3, [pc, #496]	; (8000b68 <fsm_for_input_processing+0x2e4>)
 8000978:	789b      	ldrb	r3, [r3, #2]
 800097a:	4618      	mov	r0, r3
 800097c:	f000 fb3a 	bl	8000ff4 <display7SEG_1>
							led7SegScanning = 3;
 8000980:	4b78      	ldr	r3, [pc, #480]	; (8000b64 <fsm_for_input_processing+0x2e0>)
 8000982:	2203      	movs	r2, #3
 8000984:	601a      	str	r2, [r3, #0]
							break;
 8000986:	e028      	b.n	80009da <fsm_for_input_processing+0x156>
						case 3:
							enableLed7Seg3();
 8000988:	f000 fbe2 	bl	8001150 <enableLed7Seg3>
							display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[0]+counterForRed)]);
 800098c:	4b77      	ldr	r3, [pc, #476]	; (8000b6c <fsm_for_input_processing+0x2e8>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b77      	ldr	r3, [pc, #476]	; (8000b70 <fsm_for_input_processing+0x2ec>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4413      	add	r3, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fbd8 	bl	800014c <getTimeAtIndex0>
 800099c:	4603      	mov	r3, r0
 800099e:	4a72      	ldr	r2, [pc, #456]	; (8000b68 <fsm_for_input_processing+0x2e4>)
 80009a0:	5cd3      	ldrb	r3, [r2, r3]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 fb26 	bl	8000ff4 <display7SEG_1>
							led7SegScanning = 4;
 80009a8:	4b6e      	ldr	r3, [pc, #440]	; (8000b64 <fsm_for_input_processing+0x2e0>)
 80009aa:	2204      	movs	r2, #4
 80009ac:	601a      	str	r2, [r3, #0]
							break;
 80009ae:	e014      	b.n	80009da <fsm_for_input_processing+0x156>
						case 4:
							enableLed7Seg4();
 80009b0:	f000 fbec 	bl	800118c <enableLed7Seg4>
							display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[0]+counterForRed)]);
 80009b4:	4b6d      	ldr	r3, [pc, #436]	; (8000b6c <fsm_for_input_processing+0x2e8>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b6d      	ldr	r3, [pc, #436]	; (8000b70 <fsm_for_input_processing+0x2ec>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4413      	add	r3, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fbd8 	bl	8000174 <getTimeAtIndex1>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a68      	ldr	r2, [pc, #416]	; (8000b68 <fsm_for_input_processing+0x2e4>)
 80009c8:	5cd3      	ldrb	r3, [r2, r3]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fb12 	bl	8000ff4 <display7SEG_1>
							led7SegScanning = 1;
 80009d0:	4b64      	ldr	r3, [pc, #400]	; (8000b64 <fsm_for_input_processing+0x2e0>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
							break;
 80009d6:	e000      	b.n	80009da <fsm_for_input_processing+0x156>
					}
				}
 80009d8:	bf00      	nop
				if (isButton2Press() == 1) counterForRed++;
 80009da:	f000 f9d9 	bl	8000d90 <isButton2Press>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d104      	bne.n	80009ee <fsm_for_input_processing+0x16a>
 80009e4:	4b62      	ldr	r3, [pc, #392]	; (8000b70 <fsm_for_input_processing+0x2ec>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a61      	ldr	r2, [pc, #388]	; (8000b70 <fsm_for_input_processing+0x2ec>)
 80009ec:	6013      	str	r3, [r2, #0]

				if(isButton3Press() == 1) {
 80009ee:	f000 f9e1 	bl	8000db4 <isButton3Press>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d110      	bne.n	8000a1a <fsm_for_input_processing+0x196>
					led_duration[0] += counterForRed;
 80009f8:	4b5c      	ldr	r3, [pc, #368]	; (8000b6c <fsm_for_input_processing+0x2e8>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b5c      	ldr	r3, [pc, #368]	; (8000b70 <fsm_for_input_processing+0x2ec>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4413      	add	r3, r2
 8000a02:	4a5a      	ldr	r2, [pc, #360]	; (8000b6c <fsm_for_input_processing+0x2e8>)
 8000a04:	6013      	str	r3, [r2, #0]
					if (led_duration[0] > 99) led_duration[0] = 1;
 8000a06:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <fsm_for_input_processing+0x2e8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b63      	cmp	r3, #99	; 0x63
 8000a0c:	dd02      	ble.n	8000a14 <fsm_for_input_processing+0x190>
 8000a0e:	4b57      	ldr	r3, [pc, #348]	; (8000b6c <fsm_for_input_processing+0x2e8>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
					counterForRed = 0; //reset
 8000a14:	4b56      	ldr	r3, [pc, #344]	; (8000b70 <fsm_for_input_processing+0x2ec>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
				}
				if(isButton1Press() == 1) {
 8000a1a:	f000 f9a7 	bl	8000d6c <isButton1Press>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d115      	bne.n	8000a50 <fsm_for_input_processing+0x1cc>
					buttonState = SET_TIME_YELLOW;
 8000a24:	4b42      	ldr	r3, [pc, #264]	; (8000b30 <fsm_for_input_processing+0x2ac>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	701a      	strb	r2, [r3, #0]
					timer1_flag = 1;
 8000a2a:	4b4a      	ldr	r3, [pc, #296]	; (8000b54 <fsm_for_input_processing+0x2d0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]
					timer2_flag = 1;
 8000a30:	4b49      	ldr	r3, [pc, #292]	; (8000b58 <fsm_for_input_processing+0x2d4>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
					setTrafficYellow1();
 8000a36:	f000 fc4b 	bl	80012d0 <setTrafficYellow1>
					setTrafficYellow2();
 8000a3a:	f000 fc5f 	bl	80012fc <setTrafficYellow2>
					flag = 1;
 8000a3e:	4b47      	ldr	r3, [pc, #284]	; (8000b5c <fsm_for_input_processing+0x2d8>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	601a      	str	r2, [r3, #0]
					led7SegScanning = 1; //reset
 8000a44:	4b47      	ldr	r3, [pc, #284]	; (8000b64 <fsm_for_input_processing+0x2e0>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
					counterForRed = 0; //rest
 8000a4a:	4b49      	ldr	r3, [pc, #292]	; (8000b70 <fsm_for_input_processing+0x2ec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
			while (flag == 0) {
 8000a50:	4b42      	ldr	r3, [pc, #264]	; (8000b5c <fsm_for_input_processing+0x2d8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	f43f af5a 	beq.w	800090e <fsm_for_input_processing+0x8a>
				}
			}
			break;
 8000a5a:	e171      	b.n	8000d40 <fsm_for_input_processing+0x4bc>
		case SET_TIME_YELLOW: //Mode 3
			//todo
			flag = 0;
 8000a5c:	4b3f      	ldr	r3, [pc, #252]	; (8000b5c <fsm_for_input_processing+0x2d8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
			while (flag == 0) {
 8000a62:	e0c5      	b.n	8000bf0 <fsm_for_input_processing+0x36c>
				if (timer1_flag == 1) {
 8000a64:	4b3b      	ldr	r3, [pc, #236]	; (8000b54 <fsm_for_input_processing+0x2d0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d10b      	bne.n	8000a84 <fsm_for_input_processing+0x200>
					setTimer1(500);
 8000a6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a70:	f000 fd6e 	bl	8001550 <setTimer1>
					HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000a74:	2104      	movs	r1, #4
 8000a76:	483a      	ldr	r0, [pc, #232]	; (8000b60 <fsm_for_input_processing+0x2dc>)
 8000a78:	f001 fa11 	bl	8001e9e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	4838      	ldr	r0, [pc, #224]	; (8000b60 <fsm_for_input_processing+0x2dc>)
 8000a80:	f001 fa0d 	bl	8001e9e <HAL_GPIO_TogglePin>
				}
				if (timer2_flag == 1) {
 8000a84:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <fsm_for_input_processing+0x2d4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d175      	bne.n	8000b78 <fsm_for_input_processing+0x2f4>
					setTimer2(250);
 8000a8c:	20fa      	movs	r0, #250	; 0xfa
 8000a8e:	f000 fd7b 	bl	8001588 <setTimer2>
					switch(led7SegScanning) {
 8000a92:	4b34      	ldr	r3, [pc, #208]	; (8000b64 <fsm_for_input_processing+0x2e0>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d86e      	bhi.n	8000b7a <fsm_for_input_processing+0x2f6>
 8000a9c:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <fsm_for_input_processing+0x220>)
 8000a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa2:	bf00      	nop
 8000aa4:	08000ab5 	.word	0x08000ab5
 8000aa8:	08000acb 	.word	0x08000acb
 8000aac:	08000ae1 	.word	0x08000ae1
 8000ab0:	08000b09 	.word	0x08000b09
						case 1:
							enableLed7Seg1();
 8000ab4:	f000 fb10 	bl	80010d8 <enableLed7Seg1>
							display7SEG_1(segmentNumber[0]);
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <fsm_for_input_processing+0x2e4>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fa99 	bl	8000ff4 <display7SEG_1>
							led7SegScanning = 2;
 8000ac2:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <fsm_for_input_processing+0x2e0>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	601a      	str	r2, [r3, #0]
							break;
 8000ac8:	e057      	b.n	8000b7a <fsm_for_input_processing+0x2f6>
						case 2:
							enableLed7Seg2();
 8000aca:	f000 fb23 	bl	8001114 <enableLed7Seg2>
							display7SEG_1(segmentNumber[3]);
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <fsm_for_input_processing+0x2e4>)
 8000ad0:	78db      	ldrb	r3, [r3, #3]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fa8e 	bl	8000ff4 <display7SEG_1>
							led7SegScanning = 3;
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <fsm_for_input_processing+0x2e0>)
 8000ada:	2203      	movs	r2, #3
 8000adc:	601a      	str	r2, [r3, #0]
							break;
 8000ade:	e04c      	b.n	8000b7a <fsm_for_input_processing+0x2f6>
						case 3:
							enableLed7Seg3();
 8000ae0:	f000 fb36 	bl	8001150 <enableLed7Seg3>
							display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[1]+counterForYellow)]);
 8000ae4:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <fsm_for_input_processing+0x2e8>)
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <fsm_for_input_processing+0x2f0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4413      	add	r3, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fb2c 	bl	800014c <getTimeAtIndex0>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <fsm_for_input_processing+0x2e4>)
 8000af8:	5cd3      	ldrb	r3, [r2, r3]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fa7a 	bl	8000ff4 <display7SEG_1>
							led7SegScanning = 4;
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <fsm_for_input_processing+0x2e0>)
 8000b02:	2204      	movs	r2, #4
 8000b04:	601a      	str	r2, [r3, #0]
							break;
 8000b06:	e038      	b.n	8000b7a <fsm_for_input_processing+0x2f6>
						case 4:
							enableLed7Seg4();
 8000b08:	f000 fb40 	bl	800118c <enableLed7Seg4>
							display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[1]+counterForYellow)]);
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <fsm_for_input_processing+0x2e8>)
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <fsm_for_input_processing+0x2f0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fb2c 	bl	8000174 <getTimeAtIndex1>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <fsm_for_input_processing+0x2e4>)
 8000b20:	5cd3      	ldrb	r3, [r2, r3]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fa66 	bl	8000ff4 <display7SEG_1>
							led7SegScanning = 1;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <fsm_for_input_processing+0x2e0>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]
							break;
 8000b2e:	e024      	b.n	8000b7a <fsm_for_input_processing+0x2f6>
 8000b30:	200000a8 	.word	0x200000a8
 8000b34:	20000098 	.word	0x20000098
 8000b38:	200000a4 	.word	0x200000a4
 8000b3c:	20000090 	.word	0x20000090
 8000b40:	2000009c 	.word	0x2000009c
 8000b44:	20000094 	.word	0x20000094
 8000b48:	200000a0 	.word	0x200000a0
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	2000000c 	.word	0x2000000c
 8000b54:	200000c8 	.word	0x200000c8
 8000b58:	200000d0 	.word	0x200000d0
 8000b5c:	200000b8 	.word	0x200000b8
 8000b60:	40010800 	.word	0x40010800
 8000b64:	2000001c 	.word	0x2000001c
 8000b68:	2000005c 	.word	0x2000005c
 8000b6c:	20000010 	.word	0x20000010
 8000b70:	200000ac 	.word	0x200000ac
 8000b74:	200000b4 	.word	0x200000b4
					}
				}
 8000b78:	bf00      	nop
				if (isButton2Press() == 1) counterForYellow++;
 8000b7a:	f000 f909 	bl	8000d90 <isButton2Press>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d104      	bne.n	8000b8e <fsm_for_input_processing+0x30a>
 8000b84:	4b6f      	ldr	r3, [pc, #444]	; (8000d44 <fsm_for_input_processing+0x4c0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	4a6e      	ldr	r2, [pc, #440]	; (8000d44 <fsm_for_input_processing+0x4c0>)
 8000b8c:	6013      	str	r3, [r2, #0]

				if(isButton3Press() == 1) {
 8000b8e:	f000 f911 	bl	8000db4 <isButton3Press>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d110      	bne.n	8000bba <fsm_for_input_processing+0x336>
					led_duration[1] += counterForYellow;
 8000b98:	4b6b      	ldr	r3, [pc, #428]	; (8000d48 <fsm_for_input_processing+0x4c4>)
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	4b69      	ldr	r3, [pc, #420]	; (8000d44 <fsm_for_input_processing+0x4c0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a69      	ldr	r2, [pc, #420]	; (8000d48 <fsm_for_input_processing+0x4c4>)
 8000ba4:	6053      	str	r3, [r2, #4]
					if (led_duration[1] > 99) led_duration[1] = 1;
 8000ba6:	4b68      	ldr	r3, [pc, #416]	; (8000d48 <fsm_for_input_processing+0x4c4>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b63      	cmp	r3, #99	; 0x63
 8000bac:	dd02      	ble.n	8000bb4 <fsm_for_input_processing+0x330>
 8000bae:	4b66      	ldr	r3, [pc, #408]	; (8000d48 <fsm_for_input_processing+0x4c4>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	605a      	str	r2, [r3, #4]
					counterForYellow = 0; //reset
 8000bb4:	4b63      	ldr	r3, [pc, #396]	; (8000d44 <fsm_for_input_processing+0x4c0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
				}
				if(isButton1Press() == 1) {
 8000bba:	f000 f8d7 	bl	8000d6c <isButton1Press>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d115      	bne.n	8000bf0 <fsm_for_input_processing+0x36c>
					buttonState = SET_TIME_GREEN;
 8000bc4:	4b61      	ldr	r3, [pc, #388]	; (8000d4c <fsm_for_input_processing+0x4c8>)
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	701a      	strb	r2, [r3, #0]
					timer1_flag = 1;
 8000bca:	4b61      	ldr	r3, [pc, #388]	; (8000d50 <fsm_for_input_processing+0x4cc>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]
					timer2_flag = 1;
 8000bd0:	4b60      	ldr	r3, [pc, #384]	; (8000d54 <fsm_for_input_processing+0x4d0>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
					setTrafficGreen1();
 8000bd6:	f000 fb4f 	bl	8001278 <setTrafficGreen1>
					setTrafficGreen2();
 8000bda:	f000 fb63 	bl	80012a4 <setTrafficGreen2>
					flag = 1;
 8000bde:	4b5e      	ldr	r3, [pc, #376]	; (8000d58 <fsm_for_input_processing+0x4d4>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
					led7SegScanning = 1; //reset
 8000be4:	4b5d      	ldr	r3, [pc, #372]	; (8000d5c <fsm_for_input_processing+0x4d8>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	601a      	str	r2, [r3, #0]
					counterForYellow = 0; //reset
 8000bea:	4b56      	ldr	r3, [pc, #344]	; (8000d44 <fsm_for_input_processing+0x4c0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
			while (flag == 0) {
 8000bf0:	4b59      	ldr	r3, [pc, #356]	; (8000d58 <fsm_for_input_processing+0x4d4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f43f af35 	beq.w	8000a64 <fsm_for_input_processing+0x1e0>
				}
			}
			break;
 8000bfa:	e0a1      	b.n	8000d40 <fsm_for_input_processing+0x4bc>
		case SET_TIME_GREEN: //Mode 4
			flag = 0;
 8000bfc:	4b56      	ldr	r3, [pc, #344]	; (8000d58 <fsm_for_input_processing+0x4d4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
			while (flag == 0) {
 8000c02:	e097      	b.n	8000d34 <fsm_for_input_processing+0x4b0>
				if (timer1_flag == 1) {
 8000c04:	4b52      	ldr	r3, [pc, #328]	; (8000d50 <fsm_for_input_processing+0x4cc>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d10b      	bne.n	8000c24 <fsm_for_input_processing+0x3a0>
					setTimer1(500);
 8000c0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c10:	f000 fc9e 	bl	8001550 <setTimer1>
					HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000c14:	2108      	movs	r1, #8
 8000c16:	4852      	ldr	r0, [pc, #328]	; (8000d60 <fsm_for_input_processing+0x4dc>)
 8000c18:	f001 f941 	bl	8001e9e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000c1c:	2140      	movs	r1, #64	; 0x40
 8000c1e:	4850      	ldr	r0, [pc, #320]	; (8000d60 <fsm_for_input_processing+0x4dc>)
 8000c20:	f001 f93d 	bl	8001e9e <HAL_GPIO_TogglePin>
				}
				if (timer2_flag == 1) {
 8000c24:	4b4b      	ldr	r3, [pc, #300]	; (8000d54 <fsm_for_input_processing+0x4d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d151      	bne.n	8000cd0 <fsm_for_input_processing+0x44c>
					setTimer2(250);
 8000c2c:	20fa      	movs	r0, #250	; 0xfa
 8000c2e:	f000 fcab 	bl	8001588 <setTimer2>
					switch(led7SegScanning) {
 8000c32:	4b4a      	ldr	r3, [pc, #296]	; (8000d5c <fsm_for_input_processing+0x4d8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d84a      	bhi.n	8000cd2 <fsm_for_input_processing+0x44e>
 8000c3c:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <fsm_for_input_processing+0x3c0>)
 8000c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c42:	bf00      	nop
 8000c44:	08000c55 	.word	0x08000c55
 8000c48:	08000c6b 	.word	0x08000c6b
 8000c4c:	08000c81 	.word	0x08000c81
 8000c50:	08000ca9 	.word	0x08000ca9
						case 1:
							enableLed7Seg1();
 8000c54:	f000 fa40 	bl	80010d8 <enableLed7Seg1>
							display7SEG_1(segmentNumber[0]);
 8000c58:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <fsm_for_input_processing+0x4e0>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f9c9 	bl	8000ff4 <display7SEG_1>
							led7SegScanning = 2;
 8000c62:	4b3e      	ldr	r3, [pc, #248]	; (8000d5c <fsm_for_input_processing+0x4d8>)
 8000c64:	2202      	movs	r2, #2
 8000c66:	601a      	str	r2, [r3, #0]
							break;
 8000c68:	e033      	b.n	8000cd2 <fsm_for_input_processing+0x44e>
						case 2:
							enableLed7Seg2();
 8000c6a:	f000 fa53 	bl	8001114 <enableLed7Seg2>
							display7SEG_1(segmentNumber[4]);
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <fsm_for_input_processing+0x4e0>)
 8000c70:	791b      	ldrb	r3, [r3, #4]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f9be 	bl	8000ff4 <display7SEG_1>
							led7SegScanning = 3;
 8000c78:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <fsm_for_input_processing+0x4d8>)
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	601a      	str	r2, [r3, #0]
							break;
 8000c7e:	e028      	b.n	8000cd2 <fsm_for_input_processing+0x44e>
						case 3:
							enableLed7Seg3();
 8000c80:	f000 fa66 	bl	8001150 <enableLed7Seg3>
							display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[2]+counterForGreen)]);
 8000c84:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <fsm_for_input_processing+0x4c4>)
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <fsm_for_input_processing+0x4e4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fa5c 	bl	800014c <getTimeAtIndex0>
 8000c94:	4603      	mov	r3, r0
 8000c96:	4a33      	ldr	r2, [pc, #204]	; (8000d64 <fsm_for_input_processing+0x4e0>)
 8000c98:	5cd3      	ldrb	r3, [r2, r3]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f9aa 	bl	8000ff4 <display7SEG_1>
							led7SegScanning = 4;
 8000ca0:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <fsm_for_input_processing+0x4d8>)
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	601a      	str	r2, [r3, #0]
							break;
 8000ca6:	e014      	b.n	8000cd2 <fsm_for_input_processing+0x44e>
						case 4:
							enableLed7Seg4();
 8000ca8:	f000 fa70 	bl	800118c <enableLed7Seg4>
							display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[2]+counterForGreen)]);
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <fsm_for_input_processing+0x4c4>)
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <fsm_for_input_processing+0x4e4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fa5c 	bl	8000174 <getTimeAtIndex1>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <fsm_for_input_processing+0x4e0>)
 8000cc0:	5cd3      	ldrb	r3, [r2, r3]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f996 	bl	8000ff4 <display7SEG_1>
							led7SegScanning = 1;
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <fsm_for_input_processing+0x4d8>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
							break;
 8000cce:	e000      	b.n	8000cd2 <fsm_for_input_processing+0x44e>
					}
				}
 8000cd0:	bf00      	nop
				if (isButton2Press() == 1) counterForGreen++;
 8000cd2:	f000 f85d 	bl	8000d90 <isButton2Press>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d104      	bne.n	8000ce6 <fsm_for_input_processing+0x462>
 8000cdc:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <fsm_for_input_processing+0x4e4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <fsm_for_input_processing+0x4e4>)
 8000ce4:	6013      	str	r3, [r2, #0]

				if(isButton3Press() == 1) {
 8000ce6:	f000 f865 	bl	8000db4 <isButton3Press>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d110      	bne.n	8000d12 <fsm_for_input_processing+0x48e>
					led_duration[2] += counterForGreen;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <fsm_for_input_processing+0x4c4>)
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <fsm_for_input_processing+0x4e4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <fsm_for_input_processing+0x4c4>)
 8000cfc:	6093      	str	r3, [r2, #8]
					if (led_duration[2] > 99) led_duration[2] = 1;
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <fsm_for_input_processing+0x4c4>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2b63      	cmp	r3, #99	; 0x63
 8000d04:	dd02      	ble.n	8000d0c <fsm_for_input_processing+0x488>
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <fsm_for_input_processing+0x4c4>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	609a      	str	r2, [r3, #8]
					counterForGreen = 0; //reset
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <fsm_for_input_processing+0x4e4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
				}
				if(isButton1Press() == 1) {
 8000d12:	f000 f82b 	bl	8000d6c <isButton1Press>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d10b      	bne.n	8000d34 <fsm_for_input_processing+0x4b0>
					buttonState = NORMAL;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <fsm_for_input_processing+0x4c8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
					flag = 1;
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <fsm_for_input_processing+0x4d4>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
					led7SegScanning = 1; //reset
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <fsm_for_input_processing+0x4d8>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]
					counterForGreen = 0; //reset
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <fsm_for_input_processing+0x4e4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
			while (flag == 0) {
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <fsm_for_input_processing+0x4d4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f43f af63 	beq.w	8000c04 <fsm_for_input_processing+0x380>
				}
			}
			break;
 8000d3e:	bf00      	nop
	}
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200000b4 	.word	0x200000b4
 8000d48:	20000010 	.word	0x20000010
 8000d4c:	200000a8 	.word	0x200000a8
 8000d50:	200000c8 	.word	0x200000c8
 8000d54:	200000d0 	.word	0x200000d0
 8000d58:	200000b8 	.word	0x200000b8
 8000d5c:	2000001c 	.word	0x2000001c
 8000d60:	40010800 	.word	0x40010800
 8000d64:	2000005c 	.word	0x2000005c
 8000d68:	200000b0 	.word	0x200000b0

08000d6c <isButton1Press>:
int TimeOutForKeyPress3 =  500; //if the button is pressed more than 5s it will change state and repeatedly do so every single 5s of pressing
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Press() {
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <isButton1Press+0x20>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d104      	bne.n	8000d82 <isButton1Press+0x16>
		button1_flag = 0;
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <isButton1Press+0x20>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
		return 1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <isButton1Press+0x18>
	}
	return 0;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	200000bc 	.word	0x200000bc

08000d90 <isButton2Press>:
int isButton2Press() {
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	if (button2_flag == 1) {
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <isButton2Press+0x20>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d104      	bne.n	8000da6 <isButton2Press+0x16>
		button2_flag = 0;
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <isButton2Press+0x20>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
		return 1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <isButton2Press+0x18>
	}
	return 0;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	200000c0 	.word	0x200000c0

08000db4 <isButton3Press>:
int isButton3Press() {
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <isButton3Press+0x20>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d104      	bne.n	8000dca <isButton3Press+0x16>
		button3_flag = 0;
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <isButton3Press+0x20>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
		return 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e000      	b.n	8000dcc <isButton3Press+0x18>
	}
	return 0;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	200000c4 	.word	0x200000c4

08000dd8 <getKeyInput>:
int KeyReg0 = NORMAL_STATE;
int KeyReg1 = NORMAL_STATE;
int KeyReg2 = NORMAL_STATE;
int KeyReg3 = NORMAL_STATE;
void getKeyInput(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 8000ddc:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <getKeyInput+0x98>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a24      	ldr	r2, [pc, #144]	; (8000e74 <getKeyInput+0x9c>)
 8000de2:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <getKeyInput+0xa0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <getKeyInput+0x98>)
 8000dea:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000dec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df0:	4822      	ldr	r0, [pc, #136]	; (8000e7c <getKeyInput+0xa4>)
 8000df2:	f001 f825 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <getKeyInput+0xa0>)
 8000dfc:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <getKeyInput+0x98>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <getKeyInput+0xa0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d12f      	bne.n	8000e6a <getKeyInput+0x92>
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <getKeyInput+0x98>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <getKeyInput+0x9c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d129      	bne.n	8000e6a <getKeyInput+0x92>
    if (KeyReg2 != KeyReg3){
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <getKeyInput+0x9c>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <getKeyInput+0xa8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d00f      	beq.n	8000e42 <getKeyInput+0x6a>
      KeyReg3 = KeyReg2;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <getKeyInput+0x9c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a16      	ldr	r2, [pc, #88]	; (8000e80 <getKeyInput+0xa8>)
 8000e28:	6013      	str	r3, [r2, #0]
      if (KeyReg3 == PRESSED_STATE){
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <getKeyInput+0xa8>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d11b      	bne.n	8000e6a <getKeyInput+0x92>
        TimeOutForKeyPress = 500;
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <getKeyInput+0xac>)
 8000e34:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e38:	601a      	str	r2, [r3, #0]
        button1_flag = 1;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <getKeyInput+0xb0>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]
				button1_flag = 1;
			 }
		}
    }
  }
}
 8000e40:	e013      	b.n	8000e6a <getKeyInput+0x92>
    	TimeOutForKeyPress--;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <getKeyInput+0xac>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <getKeyInput+0xac>)
 8000e4a:	6013      	str	r3, [r2, #0]
		if (TimeOutForKeyPress == 0){
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <getKeyInput+0xac>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d10a      	bne.n	8000e6a <getKeyInput+0x92>
			if (KeyReg3 == PRESSED_STATE){
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <getKeyInput+0xa8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d106      	bne.n	8000e6a <getKeyInput+0x92>
				TimeOutForKeyPress = 500;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <getKeyInput+0xac>)
 8000e5e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e62:	601a      	str	r2, [r3, #0]
				button1_flag = 1;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <getKeyInput+0xb0>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000030 	.word	0x20000030
 8000e74:	20000034 	.word	0x20000034
 8000e78:	2000002c 	.word	0x2000002c
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	20000038 	.word	0x20000038
 8000e84:	20000020 	.word	0x20000020
 8000e88:	200000bc 	.word	0x200000bc

08000e8c <getKeyInput2>:

int KeyReg02 = NORMAL_STATE;
int KeyReg12 = NORMAL_STATE;
int KeyReg22 = NORMAL_STATE;
int KeyReg32 = NORMAL_STATE;
void getKeyInput2(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  KeyReg22 = KeyReg12;
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <getKeyInput2+0x98>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a24      	ldr	r2, [pc, #144]	; (8000f28 <getKeyInput2+0x9c>)
 8000e96:	6013      	str	r3, [r2, #0]
  KeyReg12 = KeyReg02;
 8000e98:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <getKeyInput2+0xa0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <getKeyInput2+0x98>)
 8000e9e:	6013      	str	r3, [r2, #0]
  KeyReg02 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea4:	4822      	ldr	r0, [pc, #136]	; (8000f30 <getKeyInput2+0xa4>)
 8000ea6:	f000 ffcb 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <getKeyInput2+0xa0>)
 8000eb0:	601a      	str	r2, [r3, #0]
  if ((KeyReg12 == KeyReg02) && (KeyReg12 == KeyReg22)){
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <getKeyInput2+0x98>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <getKeyInput2+0xa0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d12f      	bne.n	8000f1e <getKeyInput2+0x92>
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <getKeyInput2+0x98>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <getKeyInput2+0x9c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d129      	bne.n	8000f1e <getKeyInput2+0x92>
    if (KeyReg22 != KeyReg32){
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <getKeyInput2+0x9c>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <getKeyInput2+0xa8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d00f      	beq.n	8000ef6 <getKeyInput2+0x6a>
      KeyReg32 = KeyReg22;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <getKeyInput2+0x9c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a16      	ldr	r2, [pc, #88]	; (8000f34 <getKeyInput2+0xa8>)
 8000edc:	6013      	str	r3, [r2, #0]
      if (KeyReg32 == PRESSED_STATE){
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <getKeyInput2+0xa8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d11b      	bne.n	8000f1e <getKeyInput2+0x92>
        TimeOutForKeyPress2 = 500;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <getKeyInput2+0xac>)
 8000ee8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000eec:	601a      	str	r2, [r3, #0]
        button2_flag = 1;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <getKeyInput2+0xb0>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
				button2_flag = 1;
			 }
		}
    }
  }
}
 8000ef4:	e013      	b.n	8000f1e <getKeyInput2+0x92>
    	TimeOutForKeyPress2--;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <getKeyInput2+0xac>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <getKeyInput2+0xac>)
 8000efe:	6013      	str	r3, [r2, #0]
		if (TimeOutForKeyPress2 == 0){
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <getKeyInput2+0xac>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10a      	bne.n	8000f1e <getKeyInput2+0x92>
			if (KeyReg32 == PRESSED_STATE){
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <getKeyInput2+0xa8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d106      	bne.n	8000f1e <getKeyInput2+0x92>
				TimeOutForKeyPress2 = 500;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <getKeyInput2+0xac>)
 8000f12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f16:	601a      	str	r2, [r3, #0]
				button2_flag = 1;
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <getKeyInput2+0xb0>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000040 	.word	0x20000040
 8000f28:	20000044 	.word	0x20000044
 8000f2c:	2000003c 	.word	0x2000003c
 8000f30:	40010800 	.word	0x40010800
 8000f34:	20000048 	.word	0x20000048
 8000f38:	20000024 	.word	0x20000024
 8000f3c:	200000c0 	.word	0x200000c0

08000f40 <getKeyInput3>:

int KeyReg03 = NORMAL_STATE;
int KeyReg13 = NORMAL_STATE;
int KeyReg23 = NORMAL_STATE;
int KeyReg33 = NORMAL_STATE;
void getKeyInput3(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  KeyReg23 = KeyReg13;
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <getKeyInput3+0x98>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <getKeyInput3+0x9c>)
 8000f4a:	6013      	str	r3, [r2, #0]
  KeyReg13 = KeyReg03;
 8000f4c:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <getKeyInput3+0xa0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <getKeyInput3+0x98>)
 8000f52:	6013      	str	r3, [r2, #0]
  KeyReg03 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f58:	4822      	ldr	r0, [pc, #136]	; (8000fe4 <getKeyInput3+0xa4>)
 8000f5a:	f000 ff71 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <getKeyInput3+0xa0>)
 8000f64:	601a      	str	r2, [r3, #0]
  if ((KeyReg13 == KeyReg03) && (KeyReg13 == KeyReg23)){
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <getKeyInput3+0x98>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <getKeyInput3+0xa0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d12f      	bne.n	8000fd2 <getKeyInput3+0x92>
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <getKeyInput3+0x98>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <getKeyInput3+0x9c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d129      	bne.n	8000fd2 <getKeyInput3+0x92>
    if (KeyReg23 != KeyReg33){
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <getKeyInput3+0x9c>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <getKeyInput3+0xa8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d00f      	beq.n	8000faa <getKeyInput3+0x6a>
      KeyReg33 = KeyReg23;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <getKeyInput3+0x9c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <getKeyInput3+0xa8>)
 8000f90:	6013      	str	r3, [r2, #0]
      if (KeyReg33 == PRESSED_STATE){
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <getKeyInput3+0xa8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d11b      	bne.n	8000fd2 <getKeyInput3+0x92>
        TimeOutForKeyPress3 = 500;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <getKeyInput3+0xac>)
 8000f9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fa0:	601a      	str	r2, [r3, #0]
        button3_flag = 1;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <getKeyInput3+0xb0>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
				button3_flag = 1;
			 }
		}
    }
  }
}
 8000fa8:	e013      	b.n	8000fd2 <getKeyInput3+0x92>
    	TimeOutForKeyPress3--;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <getKeyInput3+0xac>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <getKeyInput3+0xac>)
 8000fb2:	6013      	str	r3, [r2, #0]
		if (TimeOutForKeyPress3 == 0){
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <getKeyInput3+0xac>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10a      	bne.n	8000fd2 <getKeyInput3+0x92>
			if (KeyReg33 == PRESSED_STATE){
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <getKeyInput3+0xa8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d106      	bne.n	8000fd2 <getKeyInput3+0x92>
				TimeOutForKeyPress3 = 500;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <getKeyInput3+0xac>)
 8000fc6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fca:	601a      	str	r2, [r3, #0]
				button3_flag = 1;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <getKeyInput3+0xb0>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	601a      	str	r2, [r3, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000050 	.word	0x20000050
 8000fdc:	20000054 	.word	0x20000054
 8000fe0:	2000004c 	.word	0x2000004c
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	20000058 	.word	0x20000058
 8000fec:	20000028 	.word	0x20000028
 8000ff0:	200000c4 	.word	0x200000c4

08000ff4 <display7SEG_1>:
        0x07,  // 7
        0x7f,  // 8
        0x67   // 9
};

void display7SEG_1(uint8_t number){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ((number>>0)&0x01)^0x01);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	bf0c      	ite	eq
 8001008:	2301      	moveq	r3, #1
 800100a:	2300      	movne	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	461a      	mov	r2, r3
 8001010:	2101      	movs	r1, #1
 8001012:	4830      	ldr	r0, [pc, #192]	; (80010d4 <display7SEG_1+0xe0>)
 8001014:	f000 ff2b 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ((number>>1)&0x01)^0x01);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	085b      	lsrs	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	bf0c      	ite	eq
 8001026:	2301      	moveq	r3, #1
 8001028:	2300      	movne	r3, #0
 800102a:	b2db      	uxtb	r3, r3
 800102c:	461a      	mov	r2, r3
 800102e:	2102      	movs	r1, #2
 8001030:	4828      	ldr	r0, [pc, #160]	; (80010d4 <display7SEG_1+0xe0>)
 8001032:	f000 ff1c 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ((number>>2)&0x01)^0x01);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	b2db      	uxtb	r3, r3
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf0c      	ite	eq
 8001044:	2301      	moveq	r3, #1
 8001046:	2300      	movne	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	2104      	movs	r1, #4
 800104e:	4821      	ldr	r0, [pc, #132]	; (80010d4 <display7SEG_1+0xe0>)
 8001050:	f000 ff0d 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ((number>>3)&0x01)^0x01);
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	08db      	lsrs	r3, r3, #3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	bf0c      	ite	eq
 8001062:	2301      	moveq	r3, #1
 8001064:	2300      	movne	r3, #0
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	2108      	movs	r1, #8
 800106c:	4819      	ldr	r0, [pc, #100]	; (80010d4 <display7SEG_1+0xe0>)
 800106e:	f000 fefe 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, ((number>>4)&0x01)^0x01);
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf0c      	ite	eq
 8001080:	2301      	moveq	r3, #1
 8001082:	2300      	movne	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	2110      	movs	r1, #16
 800108a:	4812      	ldr	r0, [pc, #72]	; (80010d4 <display7SEG_1+0xe0>)
 800108c:	f000 feef 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ((number>>5)&0x01)^0x01);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf0c      	ite	eq
 800109e:	2301      	moveq	r3, #1
 80010a0:	2300      	movne	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	2120      	movs	r1, #32
 80010a8:	480a      	ldr	r0, [pc, #40]	; (80010d4 <display7SEG_1+0xe0>)
 80010aa:	f000 fee0 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ((number>>6)&0x01)^0x01);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	099b      	lsrs	r3, r3, #6
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bf0c      	ite	eq
 80010bc:	2301      	moveq	r3, #1
 80010be:	2300      	movne	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	2140      	movs	r1, #64	; 0x40
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <display7SEG_1+0xe0>)
 80010c8:	f000 fed1 	bl	8001e6e <HAL_GPIO_WritePin>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40010c00 	.word	0x40010c00

080010d8 <enableLed7Seg1>:
void enableLed7Seg1() {
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	480b      	ldr	r0, [pc, #44]	; (8001110 <enableLed7Seg1+0x38>)
 80010e2:	f000 fec4 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ec:	4808      	ldr	r0, [pc, #32]	; (8001110 <enableLed7Seg1+0x38>)
 80010ee:	f000 febe 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <enableLed7Seg1+0x38>)
 80010fa:	f000 feb8 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <enableLed7Seg1+0x38>)
 8001106:	f000 feb2 	bl	8001e6e <HAL_GPIO_WritePin>
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40010800 	.word	0x40010800

08001114 <enableLed7Seg2>:
void enableLed7Seg2() {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2180      	movs	r1, #128	; 0x80
 800111c:	480b      	ldr	r0, [pc, #44]	; (800114c <enableLed7Seg2+0x38>)
 800111e:	f000 fea6 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <enableLed7Seg2+0x38>)
 800112a:	f000 fea0 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <enableLed7Seg2+0x38>)
 8001136:	f000 fe9a 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <enableLed7Seg2+0x38>)
 8001142:	f000 fe94 	bl	8001e6e <HAL_GPIO_WritePin>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40010800 	.word	0x40010800

08001150 <enableLed7Seg3>:
void enableLed7Seg3() {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001154:	2201      	movs	r2, #1
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	480b      	ldr	r0, [pc, #44]	; (8001188 <enableLed7Seg3+0x38>)
 800115a:	f000 fe88 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001164:	4808      	ldr	r0, [pc, #32]	; (8001188 <enableLed7Seg3+0x38>)
 8001166:	f000 fe82 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <enableLed7Seg3+0x38>)
 8001172:	f000 fe7c 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <enableLed7Seg3+0x38>)
 800117e:	f000 fe76 	bl	8001e6e <HAL_GPIO_WritePin>
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40010800 	.word	0x40010800

0800118c <enableLed7Seg4>:
void enableLed7Seg4() {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <enableLed7Seg4+0x38>)
 8001196:	f000 fe6a 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <enableLed7Seg4+0x38>)
 80011a2:	f000 fe64 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <enableLed7Seg4+0x38>)
 80011ae:	f000 fe5e 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <enableLed7Seg4+0x38>)
 80011ba:	f000 fe58 	bl	8001e6e <HAL_GPIO_WritePin>
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40010800 	.word	0x40010800

080011c8 <initTrafficLight1>:

void initTrafficLight1() {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2102      	movs	r1, #2
 80011d0:	4807      	ldr	r0, [pc, #28]	; (80011f0 <initTrafficLight1+0x28>)
 80011d2:	f000 fe4c 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2108      	movs	r1, #8
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <initTrafficLight1+0x28>)
 80011dc:	f000 fe47 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2104      	movs	r1, #4
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <initTrafficLight1+0x28>)
 80011e6:	f000 fe42 	bl	8001e6e <HAL_GPIO_WritePin>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40010800 	.word	0x40010800

080011f4 <initTrafficLight2>:

void initTrafficLight2() {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2110      	movs	r1, #16
 80011fc:	4807      	ldr	r0, [pc, #28]	; (800121c <initTrafficLight2+0x28>)
 80011fe:	f000 fe36 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2140      	movs	r1, #64	; 0x40
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <initTrafficLight2+0x28>)
 8001208:	f000 fe31 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2120      	movs	r1, #32
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <initTrafficLight2+0x28>)
 8001212:	f000 fe2c 	bl	8001e6e <HAL_GPIO_WritePin>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40010800 	.word	0x40010800

08001220 <setTrafficRed1>:
void setTrafficRed1() {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2102      	movs	r1, #2
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <setTrafficRed1+0x28>)
 800122a:	f000 fe20 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800122e:	2201      	movs	r2, #1
 8001230:	2108      	movs	r1, #8
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <setTrafficRed1+0x28>)
 8001234:	f000 fe1b 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2104      	movs	r1, #4
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <setTrafficRed1+0x28>)
 800123e:	f000 fe16 	bl	8001e6e <HAL_GPIO_WritePin>
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40010800 	.word	0x40010800

0800124c <setTrafficRed2>:
void setTrafficRed2() {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2110      	movs	r1, #16
 8001254:	4807      	ldr	r0, [pc, #28]	; (8001274 <setTrafficRed2+0x28>)
 8001256:	f000 fe0a 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 800125a:	2201      	movs	r2, #1
 800125c:	2140      	movs	r1, #64	; 0x40
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <setTrafficRed2+0x28>)
 8001260:	f000 fe05 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001264:	2201      	movs	r2, #1
 8001266:	2120      	movs	r1, #32
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <setTrafficRed2+0x28>)
 800126a:	f000 fe00 	bl	8001e6e <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40010800 	.word	0x40010800

08001278 <setTrafficGreen1>:

void setTrafficGreen1() {
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800127c:	2201      	movs	r2, #1
 800127e:	2102      	movs	r1, #2
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <setTrafficGreen1+0x28>)
 8001282:	f000 fdf4 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2108      	movs	r1, #8
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <setTrafficGreen1+0x28>)
 800128c:	f000 fdef 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001290:	2201      	movs	r2, #1
 8001292:	2104      	movs	r1, #4
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <setTrafficGreen1+0x28>)
 8001296:	f000 fdea 	bl	8001e6e <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40010800 	.word	0x40010800

080012a4 <setTrafficGreen2>:
void setTrafficGreen2() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2110      	movs	r1, #16
 80012ac:	4807      	ldr	r0, [pc, #28]	; (80012cc <setTrafficGreen2+0x28>)
 80012ae:	f000 fdde 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2140      	movs	r1, #64	; 0x40
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <setTrafficGreen2+0x28>)
 80012b8:	f000 fdd9 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2120      	movs	r1, #32
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <setTrafficGreen2+0x28>)
 80012c2:	f000 fdd4 	bl	8001e6e <HAL_GPIO_WritePin>
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40010800 	.word	0x40010800

080012d0 <setTrafficYellow1>:

void setTrafficYellow1() {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2102      	movs	r1, #2
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <setTrafficYellow1+0x28>)
 80012da:	f000 fdc8 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2108      	movs	r1, #8
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <setTrafficYellow1+0x28>)
 80012e4:	f000 fdc3 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2104      	movs	r1, #4
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <setTrafficYellow1+0x28>)
 80012ee:	f000 fdbe 	bl	8001e6e <HAL_GPIO_WritePin>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40010800 	.word	0x40010800

080012fc <setTrafficYellow2>:

void setTrafficYellow2() {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8001300:	2201      	movs	r2, #1
 8001302:	2110      	movs	r1, #16
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <setTrafficYellow2+0x28>)
 8001306:	f000 fdb2 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 800130a:	2201      	movs	r2, #1
 800130c:	2140      	movs	r1, #64	; 0x40
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <setTrafficYellow2+0x28>)
 8001310:	f000 fdad 	bl	8001e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2120      	movs	r1, #32
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <setTrafficYellow2+0x28>)
 800131a:	f000 fda8 	bl	8001e6e <HAL_GPIO_WritePin>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40010800 	.word	0x40010800

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132c:	f000 fa9e 	bl	800186c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001330:	f000 f80c 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001334:	f000 f892 	bl	800145c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001338:	f000 f844 	bl	80013c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <main+0x20>)
 800133e:	f001 f9ff 	bl	8002740 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_for_input_processing();
 8001342:	f7ff fa9f 	bl	8000884 <fsm_for_input_processing>
 8001346:	e7fc      	b.n	8001342 <main+0x1a>
 8001348:	200000f0 	.word	0x200000f0

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b090      	sub	sp, #64	; 0x40
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0318 	add.w	r3, r7, #24
 8001356:	2228      	movs	r2, #40	; 0x28
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fda8 	bl	8002eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001372:	2301      	movs	r3, #1
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001376:	2310      	movs	r3, #16
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800137a:	2300      	movs	r3, #0
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fda4 	bl	8001ed0 <HAL_RCC_OscConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800138e:	f000 f8d9 	bl	8001544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001392:	230f      	movs	r3, #15
 8001394:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 f810 	bl	80023d0 <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013b6:	f000 f8c5 	bl	8001544 <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3740      	adds	r7, #64	; 0x40
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d8:	463b      	mov	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_TIM2_Init+0x94>)
 80013e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_TIM2_Init+0x94>)
 80013ea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80013ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <MX_TIM2_Init+0x94>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_TIM2_Init+0x94>)
 80013f8:	220a      	movs	r2, #10
 80013fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_TIM2_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_TIM2_Init+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001408:	4813      	ldr	r0, [pc, #76]	; (8001458 <MX_TIM2_Init+0x94>)
 800140a:	f001 f949 	bl	80026a0 <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001414:	f000 f896 	bl	8001544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4619      	mov	r1, r3
 8001424:	480c      	ldr	r0, [pc, #48]	; (8001458 <MX_TIM2_Init+0x94>)
 8001426:	f001 fadf 	bl	80029e8 <HAL_TIM_ConfigClockSource>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001430:	f000 f888 	bl	8001544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_TIM2_Init+0x94>)
 8001442:	f001 fca7 	bl	8002d94 <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800144c:	f000 f87a 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200000f0 	.word	0x200000f0

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <MX_GPIO_Init+0xbc>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a28      	ldr	r2, [pc, #160]	; (8001518 <MX_GPIO_Init+0xbc>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <MX_GPIO_Init+0xbc>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <MX_GPIO_Init+0xbc>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a22      	ldr	r2, [pc, #136]	; (8001518 <MX_GPIO_Init+0xbc>)
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b20      	ldr	r3, [pc, #128]	; (8001518 <MX_GPIO_Init+0xbc>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80014a0:	2200      	movs	r2, #0
 80014a2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80014a6:	481d      	ldr	r0, [pc, #116]	; (800151c <MX_GPIO_Init+0xc0>)
 80014a8:	f000 fce1 	bl	8001e6e <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|b2_Pin
 80014ac:	2200      	movs	r2, #0
 80014ae:	f64f 617f 	movw	r1, #65151	; 0xfe7f
 80014b2:	481b      	ldr	r0, [pc, #108]	; (8001520 <MX_GPIO_Init+0xc4>)
 80014b4:	f000 fcdb 	bl	8001e6e <HAL_GPIO_WritePin>
                          |g1_Pin|a2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin EN1_Pin EN2_Pin
                           EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80014b8:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80014bc:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2302      	movs	r3, #2
 80014c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	4619      	mov	r1, r3
 80014d0:	4812      	ldr	r0, [pc, #72]	; (800151c <MX_GPIO_Init+0xc0>)
 80014d2:	f000 fb3b 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin b2_Pin
                           c2_Pin d2_Pin e2_Pin f2_Pin
                           g2_Pin d1_Pin e1_Pin f1_Pin
                           g1_Pin a2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|b2_Pin
 80014d6:	f64f 637f 	movw	r3, #65151	; 0xfe7f
 80014da:	60bb      	str	r3, [r7, #8]
                          |c2_Pin|d2_Pin|e2_Pin|f2_Pin
                          |g2_Pin|d1_Pin|e1_Pin|f1_Pin
                          |g1_Pin|a2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2302      	movs	r3, #2
 80014e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4619      	mov	r1, r3
 80014ee:	480c      	ldr	r0, [pc, #48]	; (8001520 <MX_GPIO_Init+0xc4>)
 80014f0:	f000 fb2c 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80014f4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fe:	2301      	movs	r3, #1
 8001500:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4619      	mov	r1, r3
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_GPIO_Init+0xc0>)
 800150a:	f000 fb1f 	bl	8001b4c <HAL_GPIO_Init>

}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	40010800 	.word	0x40010800
 8001520:	40010c00 	.word	0x40010c00

08001524 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	getKeyInput();
 800152c:	f7ff fc54 	bl	8000dd8 <getKeyInput>
	getKeyInput2();
 8001530:	f7ff fcac 	bl	8000e8c <getKeyInput2>
	getKeyInput3();
 8001534:	f7ff fd04 	bl	8000f40 <getKeyInput3>
	timerRun();
 8001538:	f000 f87a 	bl	8001630 <timerRun>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800154c:	e7fe      	b.n	800154c <Error_Handler+0x8>
	...

08001550 <setTimer1>:

int timer5_flag = 0;
int timer5_counter = 0;


void setTimer1(int duration) {
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <setTimer1+0x2c>)
 800155c:	fb82 1203 	smull	r1, r2, r2, r3
 8001560:	1092      	asrs	r2, r2, #2
 8001562:	17db      	asrs	r3, r3, #31
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	4a06      	ldr	r2, [pc, #24]	; (8001580 <setTimer1+0x30>)
 8001568:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <setTimer1+0x34>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	66666667 	.word	0x66666667
 8001580:	200000cc 	.word	0x200000cc
 8001584:	200000c8 	.word	0x200000c8

08001588 <setTimer2>:
void setTimer2(int duration) {
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <setTimer2+0x2c>)
 8001594:	fb82 1203 	smull	r1, r2, r2, r3
 8001598:	1092      	asrs	r2, r2, #2
 800159a:	17db      	asrs	r3, r3, #31
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <setTimer2+0x30>)
 80015a0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <setTimer2+0x34>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	66666667 	.word	0x66666667
 80015b8:	200000d4 	.word	0x200000d4
 80015bc:	200000d0 	.word	0x200000d0

080015c0 <setTimer3>:

void setTimer3(int duration) {
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <setTimer3+0x2c>)
 80015cc:	fb82 1203 	smull	r1, r2, r2, r3
 80015d0:	1092      	asrs	r2, r2, #2
 80015d2:	17db      	asrs	r3, r3, #31
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <setTimer3+0x30>)
 80015d8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <setTimer3+0x34>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	66666667 	.word	0x66666667
 80015f0:	200000dc 	.word	0x200000dc
 80015f4:	200000d8 	.word	0x200000d8

080015f8 <setTimer4>:

void setTimer4(int duration) {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <setTimer4+0x2c>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	4a06      	ldr	r2, [pc, #24]	; (8001628 <setTimer4+0x30>)
 8001610:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <setTimer4+0x34>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	66666667 	.word	0x66666667
 8001628:	200000e4 	.word	0x200000e4
 800162c:	200000e0 	.word	0x200000e0

08001630 <timerRun>:
void setTimer5(int duration) {
	timer5_counter = duration/TICK;
	timer5_flag = 0;
}

void timerRun() {
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001634:	4b29      	ldr	r3, [pc, #164]	; (80016dc <timerRun+0xac>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	dd0b      	ble.n	8001654 <timerRun+0x24>
		timer1_counter--;
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <timerRun+0xac>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3b01      	subs	r3, #1
 8001642:	4a26      	ldr	r2, [pc, #152]	; (80016dc <timerRun+0xac>)
 8001644:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8001646:	4b25      	ldr	r3, [pc, #148]	; (80016dc <timerRun+0xac>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	dc02      	bgt.n	8001654 <timerRun+0x24>
			timer1_flag = 1;
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <timerRun+0xb0>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <timerRun+0xb4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	dd0b      	ble.n	8001674 <timerRun+0x44>
		timer2_counter--;
 800165c:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <timerRun+0xb4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	4a20      	ldr	r2, [pc, #128]	; (80016e4 <timerRun+0xb4>)
 8001664:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <timerRun+0xb4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	dc02      	bgt.n	8001674 <timerRun+0x44>
			timer2_flag = 1;
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <timerRun+0xb8>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <timerRun+0xbc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	dd0b      	ble.n	8001694 <timerRun+0x64>
		timer3_counter--;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <timerRun+0xbc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3b01      	subs	r3, #1
 8001682:	4a1a      	ldr	r2, [pc, #104]	; (80016ec <timerRun+0xbc>)
 8001684:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <timerRun+0xbc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	dc02      	bgt.n	8001694 <timerRun+0x64>
			timer3_flag = 1;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <timerRun+0xc0>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0) {
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <timerRun+0xc4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	dd0b      	ble.n	80016b4 <timerRun+0x84>
		timer4_counter--;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <timerRun+0xc4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <timerRun+0xc4>)
 80016a4:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <timerRun+0xc4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	dc02      	bgt.n	80016b4 <timerRun+0x84>
			timer4_flag = 1;
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <timerRun+0xc8>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0) {
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <timerRun+0xcc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	dd0b      	ble.n	80016d4 <timerRun+0xa4>
		timer5_counter--;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <timerRun+0xcc>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <timerRun+0xcc>)
 80016c4:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <timerRun+0xcc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	dc02      	bgt.n	80016d4 <timerRun+0xa4>
			timer5_flag = 1;
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <timerRun+0xd0>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	200000cc 	.word	0x200000cc
 80016e0:	200000c8 	.word	0x200000c8
 80016e4:	200000d4 	.word	0x200000d4
 80016e8:	200000d0 	.word	0x200000d0
 80016ec:	200000dc 	.word	0x200000dc
 80016f0:	200000d8 	.word	0x200000d8
 80016f4:	200000e4 	.word	0x200000e4
 80016f8:	200000e0 	.word	0x200000e0
 80016fc:	200000ec 	.word	0x200000ec
 8001700:	200000e8 	.word	0x200000e8

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_MspInit+0x5c>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	4a14      	ldr	r2, [pc, #80]	; (8001760 <HAL_MspInit+0x5c>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6193      	str	r3, [r2, #24]
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_MspInit+0x5c>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_MspInit+0x5c>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <HAL_MspInit+0x5c>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	61d3      	str	r3, [r2, #28]
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_MspInit+0x5c>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_MspInit+0x60>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_MspInit+0x60>)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	40021000 	.word	0x40021000
 8001764:	40010000 	.word	0x40010000

08001768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001778:	d113      	bne.n	80017a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_TIM_Base_MspInit+0x44>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <HAL_TIM_Base_MspInit+0x44>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_TIM_Base_MspInit+0x44>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	201c      	movs	r0, #28
 8001798:	f000 f9a1 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800179c:	201c      	movs	r0, #28
 800179e:	f000 f9ba 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f6:	f000 f87f 	bl	80018f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <TIM2_IRQHandler+0x10>)
 8001806:	f000 ffe7 	bl	80027d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200000f0 	.word	0x200000f0

08001814 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001822:	490d      	ldr	r1, [pc, #52]	; (8001858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001838:	4c0a      	ldr	r4, [pc, #40]	; (8001864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001846:	f7ff ffe5 	bl	8001814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800184a:	f001 fb0d 	bl	8002e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800184e:	f7ff fd6b 	bl	8001328 <main>
  bx lr
 8001852:	4770      	bx	lr
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800185c:	08002f00 	.word	0x08002f00
  ldr r2, =_sbss
 8001860:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001864:	2000013c 	.word	0x2000013c

08001868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC1_2_IRQHandler>
	...

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_Init+0x28>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_Init+0x28>)
 8001876:	f043 0310 	orr.w	r3, r3, #16
 800187a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187c:	2003      	movs	r0, #3
 800187e:	f000 f923 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001882:	200f      	movs	r0, #15
 8001884:	f000 f808 	bl	8001898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001888:	f7ff ff3c 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40022000 	.word	0x40022000

08001898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_InitTick+0x54>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_InitTick+0x58>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f93b 	bl	8001b32 <HAL_SYSTICK_Config>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00e      	b.n	80018e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b0f      	cmp	r3, #15
 80018ca:	d80a      	bhi.n	80018e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018cc:	2200      	movs	r2, #0
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f000 f903 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <HAL_InitTick+0x5c>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000068 	.word	0x20000068
 80018f0:	20000070 	.word	0x20000070
 80018f4:	2000006c 	.word	0x2000006c

080018f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_IncTick+0x1c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_IncTick+0x20>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4413      	add	r3, r2
 8001908:	4a03      	ldr	r2, [pc, #12]	; (8001918 <HAL_IncTick+0x20>)
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	20000070 	.word	0x20000070
 8001918:	20000138 	.word	0x20000138

0800191c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b02      	ldr	r3, [pc, #8]	; (800192c <HAL_GetTick+0x10>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	20000138 	.word	0x20000138

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	db0b      	blt.n	80019be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	4906      	ldr	r1, [pc, #24]	; (80019c8 <__NVIC_EnableIRQ+0x34>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	2001      	movs	r0, #1
 80019b6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f7ff ff90 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff2d 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff42 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff90 	bl	8001a20 <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5f 	bl	80019cc <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff35 	bl	8001994 <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffa2 	bl	8001a84 <SysTick_Config>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b08b      	sub	sp, #44	; 0x2c
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5e:	e148      	b.n	8001df2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b60:	2201      	movs	r2, #1
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 8137 	bne.w	8001dec <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4aa3      	ldr	r2, [pc, #652]	; (8001e10 <HAL_GPIO_Init+0x2c4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d05e      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001b88:	4aa1      	ldr	r2, [pc, #644]	; (8001e10 <HAL_GPIO_Init+0x2c4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d875      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001b8e:	4aa1      	ldr	r2, [pc, #644]	; (8001e14 <HAL_GPIO_Init+0x2c8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d058      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001b94:	4a9f      	ldr	r2, [pc, #636]	; (8001e14 <HAL_GPIO_Init+0x2c8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d86f      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001b9a:	4a9f      	ldr	r2, [pc, #636]	; (8001e18 <HAL_GPIO_Init+0x2cc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d052      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001ba0:	4a9d      	ldr	r2, [pc, #628]	; (8001e18 <HAL_GPIO_Init+0x2cc>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d869      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001ba6:	4a9d      	ldr	r2, [pc, #628]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d04c      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001bac:	4a9b      	ldr	r2, [pc, #620]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d863      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001bb2:	4a9b      	ldr	r2, [pc, #620]	; (8001e20 <HAL_GPIO_Init+0x2d4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d046      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001bb8:	4a99      	ldr	r2, [pc, #612]	; (8001e20 <HAL_GPIO_Init+0x2d4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d85d      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001bbe:	2b12      	cmp	r3, #18
 8001bc0:	d82a      	bhi.n	8001c18 <HAL_GPIO_Init+0xcc>
 8001bc2:	2b12      	cmp	r3, #18
 8001bc4:	d859      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001bc6:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <HAL_GPIO_Init+0x80>)
 8001bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bcc:	08001c47 	.word	0x08001c47
 8001bd0:	08001c21 	.word	0x08001c21
 8001bd4:	08001c33 	.word	0x08001c33
 8001bd8:	08001c75 	.word	0x08001c75
 8001bdc:	08001c7b 	.word	0x08001c7b
 8001be0:	08001c7b 	.word	0x08001c7b
 8001be4:	08001c7b 	.word	0x08001c7b
 8001be8:	08001c7b 	.word	0x08001c7b
 8001bec:	08001c7b 	.word	0x08001c7b
 8001bf0:	08001c7b 	.word	0x08001c7b
 8001bf4:	08001c7b 	.word	0x08001c7b
 8001bf8:	08001c7b 	.word	0x08001c7b
 8001bfc:	08001c7b 	.word	0x08001c7b
 8001c00:	08001c7b 	.word	0x08001c7b
 8001c04:	08001c7b 	.word	0x08001c7b
 8001c08:	08001c7b 	.word	0x08001c7b
 8001c0c:	08001c7b 	.word	0x08001c7b
 8001c10:	08001c29 	.word	0x08001c29
 8001c14:	08001c3d 	.word	0x08001c3d
 8001c18:	4a82      	ldr	r2, [pc, #520]	; (8001e24 <HAL_GPIO_Init+0x2d8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c1e:	e02c      	b.n	8001c7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	623b      	str	r3, [r7, #32]
          break;
 8001c26:	e029      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	623b      	str	r3, [r7, #32]
          break;
 8001c30:	e024      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	3308      	adds	r3, #8
 8001c38:	623b      	str	r3, [r7, #32]
          break;
 8001c3a:	e01f      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	330c      	adds	r3, #12
 8001c42:	623b      	str	r3, [r7, #32]
          break;
 8001c44:	e01a      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	623b      	str	r3, [r7, #32]
          break;
 8001c52:	e013      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	611a      	str	r2, [r3, #16]
          break;
 8001c66:	e009      	b.n	8001c7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	615a      	str	r2, [r3, #20]
          break;
 8001c72:	e003      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
          break;
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          break;
 8001c7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2bff      	cmp	r3, #255	; 0xff
 8001c80:	d801      	bhi.n	8001c86 <HAL_GPIO_Init+0x13a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	e001      	b.n	8001c8a <HAL_GPIO_Init+0x13e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2bff      	cmp	r3, #255	; 0xff
 8001c90:	d802      	bhi.n	8001c98 <HAL_GPIO_Init+0x14c>
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	e002      	b.n	8001c9e <HAL_GPIO_Init+0x152>
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	3b08      	subs	r3, #8
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	210f      	movs	r1, #15
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	401a      	ands	r2, r3
 8001cb0:	6a39      	ldr	r1, [r7, #32]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8090 	beq.w	8001dec <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ccc:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <HAL_GPIO_Init+0x2dc>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a55      	ldr	r2, [pc, #340]	; (8001e28 <HAL_GPIO_Init+0x2dc>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_GPIO_Init+0x2dc>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ce4:	4a51      	ldr	r2, [pc, #324]	; (8001e2c <HAL_GPIO_Init+0x2e0>)
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a49      	ldr	r2, [pc, #292]	; (8001e30 <HAL_GPIO_Init+0x2e4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00d      	beq.n	8001d2c <HAL_GPIO_Init+0x1e0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a48      	ldr	r2, [pc, #288]	; (8001e34 <HAL_GPIO_Init+0x2e8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d007      	beq.n	8001d28 <HAL_GPIO_Init+0x1dc>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a47      	ldr	r2, [pc, #284]	; (8001e38 <HAL_GPIO_Init+0x2ec>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_GPIO_Init+0x1d8>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e004      	b.n	8001d2e <HAL_GPIO_Init+0x1e2>
 8001d24:	2303      	movs	r3, #3
 8001d26:	e002      	b.n	8001d2e <HAL_GPIO_Init+0x1e2>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <HAL_GPIO_Init+0x1e2>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d30:	f002 0203 	and.w	r2, r2, #3
 8001d34:	0092      	lsls	r2, r2, #2
 8001d36:	4093      	lsls	r3, r2
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d3e:	493b      	ldr	r1, [pc, #236]	; (8001e2c <HAL_GPIO_Init+0x2e0>)
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d58:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4937      	ldr	r1, [pc, #220]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d66:	4b35      	ldr	r3, [pc, #212]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	4933      	ldr	r1, [pc, #204]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d80:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	492d      	ldr	r1, [pc, #180]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4929      	ldr	r1, [pc, #164]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d006      	beq.n	8001db6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4923      	ldr	r1, [pc, #140]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	608b      	str	r3, [r1, #8]
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001db6:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	491f      	ldr	r1, [pc, #124]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	4919      	ldr	r1, [pc, #100]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60cb      	str	r3, [r1, #12]
 8001ddc:	e006      	b.n	8001dec <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4915      	ldr	r1, [pc, #84]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	3301      	adds	r3, #1
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f47f aeaf 	bne.w	8001b60 <HAL_GPIO_Init+0x14>
  }
}
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
 8001e06:	372c      	adds	r7, #44	; 0x2c
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	10320000 	.word	0x10320000
 8001e14:	10310000 	.word	0x10310000
 8001e18:	10220000 	.word	0x10220000
 8001e1c:	10210000 	.word	0x10210000
 8001e20:	10120000 	.word	0x10120000
 8001e24:	10110000 	.word	0x10110000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40010800 	.word	0x40010800
 8001e34:	40010c00 	.word	0x40010c00
 8001e38:	40011000 	.word	0x40011000
 8001e3c:	40010400 	.word	0x40010400

08001e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	887b      	ldrh	r3, [r7, #2]
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e001      	b.n	8001e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	807b      	strh	r3, [r7, #2]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e7e:	787b      	ldrb	r3, [r7, #1]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e84:	887a      	ldrh	r2, [r7, #2]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e8a:	e003      	b.n	8001e94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	041a      	lsls	r2, r3, #16
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	611a      	str	r2, [r3, #16]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eb0:	887a      	ldrh	r2, [r7, #2]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	041a      	lsls	r2, r3, #16
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43d9      	mvns	r1, r3
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	400b      	ands	r3, r1
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	611a      	str	r2, [r3, #16]
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e26c      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8087 	beq.w	8001ffe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef0:	4b92      	ldr	r3, [pc, #584]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d00c      	beq.n	8001f16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001efc:	4b8f      	ldr	r3, [pc, #572]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d112      	bne.n	8001f2e <HAL_RCC_OscConfig+0x5e>
 8001f08:	4b8c      	ldr	r3, [pc, #560]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f14:	d10b      	bne.n	8001f2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f16:	4b89      	ldr	r3, [pc, #548]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d06c      	beq.n	8001ffc <HAL_RCC_OscConfig+0x12c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d168      	bne.n	8001ffc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e246      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f36:	d106      	bne.n	8001f46 <HAL_RCC_OscConfig+0x76>
 8001f38:	4b80      	ldr	r3, [pc, #512]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a7f      	ldr	r2, [pc, #508]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e02e      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd4>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x98>
 8001f4e:	4b7b      	ldr	r3, [pc, #492]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a7a      	ldr	r2, [pc, #488]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b78      	ldr	r3, [pc, #480]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a77      	ldr	r2, [pc, #476]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e01d      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0xbc>
 8001f72:	4b72      	ldr	r3, [pc, #456]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a71      	ldr	r2, [pc, #452]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b6f      	ldr	r3, [pc, #444]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6e      	ldr	r2, [pc, #440]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e00b      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd4>
 8001f8c:	4b6b      	ldr	r3, [pc, #428]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a6a      	ldr	r2, [pc, #424]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b68      	ldr	r3, [pc, #416]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a67      	ldr	r2, [pc, #412]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d013      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fcb6 	bl	800191c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff fcb2 	bl	800191c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e1fa      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b5d      	ldr	r3, [pc, #372]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0xe4>
 8001fd2:	e014      	b.n	8001ffe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fca2 	bl	800191c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7ff fc9e 	bl	800191c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1e6      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x10c>
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d063      	beq.n	80020d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800200a:	4b4c      	ldr	r3, [pc, #304]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00b      	beq.n	800202e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002016:	4b49      	ldr	r3, [pc, #292]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b08      	cmp	r3, #8
 8002020:	d11c      	bne.n	800205c <HAL_RCC_OscConfig+0x18c>
 8002022:	4b46      	ldr	r3, [pc, #280]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d116      	bne.n	800205c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202e:	4b43      	ldr	r3, [pc, #268]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_RCC_OscConfig+0x176>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e1ba      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002046:	4b3d      	ldr	r3, [pc, #244]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4939      	ldr	r1, [pc, #228]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205a:	e03a      	b.n	80020d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002064:	4b36      	ldr	r3, [pc, #216]	; (8002140 <HAL_RCC_OscConfig+0x270>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7ff fc57 	bl	800191c <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002072:	f7ff fc53 	bl	800191c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e19b      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4927      	ldr	r1, [pc, #156]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
 80020a4:	e015      	b.n	80020d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <HAL_RCC_OscConfig+0x270>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff fc36 	bl	800191c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b4:	f7ff fc32 	bl	800191c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e17a      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d03a      	beq.n	8002154 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d019      	beq.n	800211a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HAL_RCC_OscConfig+0x274>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ec:	f7ff fc16 	bl	800191c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f4:	f7ff fc12 	bl	800191c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e15a      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002112:	2001      	movs	r0, #1
 8002114:	f000 faa6 	bl	8002664 <RCC_Delay>
 8002118:	e01c      	b.n	8002154 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_RCC_OscConfig+0x274>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002120:	f7ff fbfc 	bl	800191c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002126:	e00f      	b.n	8002148 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002128:	f7ff fbf8 	bl	800191c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d908      	bls.n	8002148 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e140      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	42420000 	.word	0x42420000
 8002144:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002148:	4b9e      	ldr	r3, [pc, #632]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1e9      	bne.n	8002128 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80a6 	beq.w	80022ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002166:	4b97      	ldr	r3, [pc, #604]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10d      	bne.n	800218e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b94      	ldr	r3, [pc, #592]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a93      	ldr	r2, [pc, #588]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217c:	61d3      	str	r3, [r2, #28]
 800217e:	4b91      	ldr	r3, [pc, #580]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218a:	2301      	movs	r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218e:	4b8e      	ldr	r3, [pc, #568]	; (80023c8 <HAL_RCC_OscConfig+0x4f8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d118      	bne.n	80021cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219a:	4b8b      	ldr	r3, [pc, #556]	; (80023c8 <HAL_RCC_OscConfig+0x4f8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a8a      	ldr	r2, [pc, #552]	; (80023c8 <HAL_RCC_OscConfig+0x4f8>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a6:	f7ff fbb9 	bl	800191c <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ae:	f7ff fbb5 	bl	800191c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b64      	cmp	r3, #100	; 0x64
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0fd      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	4b81      	ldr	r3, [pc, #516]	; (80023c8 <HAL_RCC_OscConfig+0x4f8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d106      	bne.n	80021e2 <HAL_RCC_OscConfig+0x312>
 80021d4:	4b7b      	ldr	r3, [pc, #492]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4a7a      	ldr	r2, [pc, #488]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6213      	str	r3, [r2, #32]
 80021e0:	e02d      	b.n	800223e <HAL_RCC_OscConfig+0x36e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0x334>
 80021ea:	4b76      	ldr	r3, [pc, #472]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a75      	ldr	r2, [pc, #468]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6213      	str	r3, [r2, #32]
 80021f6:	4b73      	ldr	r3, [pc, #460]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a72      	ldr	r2, [pc, #456]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	e01c      	b.n	800223e <HAL_RCC_OscConfig+0x36e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b05      	cmp	r3, #5
 800220a:	d10c      	bne.n	8002226 <HAL_RCC_OscConfig+0x356>
 800220c:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	4a6c      	ldr	r2, [pc, #432]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6213      	str	r3, [r2, #32]
 8002218:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a69      	ldr	r2, [pc, #420]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	e00b      	b.n	800223e <HAL_RCC_OscConfig+0x36e>
 8002226:	4b67      	ldr	r3, [pc, #412]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a66      	ldr	r2, [pc, #408]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	6213      	str	r3, [r2, #32]
 8002232:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a63      	ldr	r2, [pc, #396]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d015      	beq.n	8002272 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7ff fb69 	bl	800191c <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7ff fb65 	bl	800191c <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e0ab      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002264:	4b57      	ldr	r3, [pc, #348]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ee      	beq.n	800224e <HAL_RCC_OscConfig+0x37e>
 8002270:	e014      	b.n	800229c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002272:	f7ff fb53 	bl	800191c <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7ff fb4f 	bl	800191c <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	; 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e095      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002290:	4b4c      	ldr	r3, [pc, #304]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1ee      	bne.n	800227a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a2:	4b48      	ldr	r3, [pc, #288]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	4a47      	ldr	r2, [pc, #284]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8081 	beq.w	80023ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b8:	4b42      	ldr	r3, [pc, #264]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d061      	beq.n	8002388 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d146      	bne.n	800235a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022cc:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <HAL_RCC_OscConfig+0x4fc>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7ff fb23 	bl	800191c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022da:	f7ff fb1f 	bl	800191c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e067      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ec:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002300:	d108      	bne.n	8002314 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002302:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	492d      	ldr	r1, [pc, #180]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002314:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a19      	ldr	r1, [r3, #32]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	430b      	orrs	r3, r1
 8002326:	4927      	ldr	r1, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800232c:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_RCC_OscConfig+0x4fc>)
 800232e:	2201      	movs	r2, #1
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7ff faf3 	bl	800191c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7ff faef 	bl	800191c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e037      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x46a>
 8002358:	e02f      	b.n	80023ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <HAL_RCC_OscConfig+0x4fc>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7ff fadc 	bl	800191c <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7ff fad8 	bl	800191c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e020      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x498>
 8002386:	e018      	b.n	80023ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e013      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40007000 	.word	0x40007000
 80023cc:	42420060 	.word	0x42420060

080023d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0d0      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d910      	bls.n	8002414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	4965      	ldr	r1, [pc, #404]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b63      	ldr	r3, [pc, #396]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b8      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800242c:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a58      	ldr	r2, [pc, #352]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002436:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a52      	ldr	r2, [pc, #328]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800244e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	494d      	ldr	r1, [pc, #308]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d040      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d115      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e073      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e06b      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ae:	4b39      	ldr	r3, [pc, #228]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4936      	ldr	r1, [pc, #216]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c0:	f7ff fa2c 	bl	800191c <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7ff fa28 	bl	800191c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e053      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 020c 	and.w	r2, r3, #12
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1eb      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d210      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	4922      	ldr	r1, [pc, #136]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e032      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4916      	ldr	r1, [pc, #88]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	490e      	ldr	r1, [pc, #56]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800255e:	f000 f821 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8002562:	4602      	mov	r2, r0
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	490a      	ldr	r1, [pc, #40]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002570:	5ccb      	ldrb	r3, [r1, r3]
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_RCC_ClockConfig+0x1cc>)
 8002578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1d0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff f98a 	bl	8001898 <HAL_InitTick>

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40022000 	.word	0x40022000
 8002594:	40021000 	.word	0x40021000
 8002598:	08002ee8 	.word	0x08002ee8
 800259c:	20000068 	.word	0x20000068
 80025a0:	2000006c 	.word	0x2000006c

080025a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	b490      	push	{r4, r7}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025aa:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025ac:	1d3c      	adds	r4, r7, #4
 80025ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025b4:	f240 2301 	movw	r3, #513	; 0x201
 80025b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	2300      	movs	r3, #0
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ce:	4b22      	ldr	r3, [pc, #136]	; (8002658 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d002      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x40>
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x46>
 80025e2:	e02d      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e6:	623b      	str	r3, [r7, #32]
      break;
 80025e8:	e02d      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	0c9b      	lsrs	r3, r3, #18
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025f6:	4413      	add	r3, r2
 80025f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <HAL_RCC_GetSysClockFreq+0xb4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	0c5b      	lsrs	r3, r3, #17
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002616:	4413      	add	r3, r2
 8002618:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800261c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	4a0e      	ldr	r2, [pc, #56]	; (800265c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002622:	fb02 f203 	mul.w	r2, r2, r3
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
 800262e:	e004      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	623b      	str	r3, [r7, #32]
      break;
 800263e:	e002      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002642:	623b      	str	r3, [r7, #32]
      break;
 8002644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002646:	6a3b      	ldr	r3, [r7, #32]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3728      	adds	r7, #40	; 0x28
 800264c:	46bd      	mov	sp, r7
 800264e:	bc90      	pop	{r4, r7}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	08002ed8 	.word	0x08002ed8
 8002658:	40021000 	.word	0x40021000
 800265c:	007a1200 	.word	0x007a1200
 8002660:	003d0900 	.word	0x003d0900

08002664 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <RCC_Delay+0x34>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0a      	ldr	r2, [pc, #40]	; (800269c <RCC_Delay+0x38>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	0a5b      	lsrs	r3, r3, #9
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002680:	bf00      	nop
  }
  while (Delay --);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1e5a      	subs	r2, r3, #1
 8002686:	60fa      	str	r2, [r7, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f9      	bne.n	8002680 <RCC_Delay+0x1c>
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	20000068 	.word	0x20000068
 800269c:	10624dd3 	.word	0x10624dd3

080026a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e041      	b.n	8002736 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff f84e 	bl	8001768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3304      	adds	r3, #4
 80026dc:	4619      	mov	r1, r3
 80026de:	4610      	mov	r0, r2
 80026e0:	f000 fa6a 	bl	8002bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d001      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e035      	b.n	80027c4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <HAL_TIM_Base_Start_IT+0x90>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d009      	beq.n	800278e <HAL_TIM_Base_Start_IT+0x4e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002782:	d004      	beq.n	800278e <HAL_TIM_Base_Start_IT+0x4e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <HAL_TIM_Base_Start_IT+0x94>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d111      	bne.n	80027b2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b06      	cmp	r3, #6
 800279e:	d010      	beq.n	80027c2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b0:	e007      	b.n	80027c2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	40000400 	.word	0x40000400

080027d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d122      	bne.n	8002834 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d11b      	bne.n	8002834 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0202 	mvn.w	r2, #2
 8002804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f9b1 	bl	8002b82 <HAL_TIM_IC_CaptureCallback>
 8002820:	e005      	b.n	800282e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f9a4 	bl	8002b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f9b3 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b04      	cmp	r3, #4
 8002840:	d122      	bne.n	8002888 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b04      	cmp	r3, #4
 800284e:	d11b      	bne.n	8002888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0204 	mvn.w	r2, #4
 8002858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2202      	movs	r2, #2
 800285e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f987 	bl	8002b82 <HAL_TIM_IC_CaptureCallback>
 8002874:	e005      	b.n	8002882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f97a 	bl	8002b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f989 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b08      	cmp	r3, #8
 8002894:	d122      	bne.n	80028dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d11b      	bne.n	80028dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0208 	mvn.w	r2, #8
 80028ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2204      	movs	r2, #4
 80028b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f95d 	bl	8002b82 <HAL_TIM_IC_CaptureCallback>
 80028c8:	e005      	b.n	80028d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f950 	bl	8002b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f95f 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d122      	bne.n	8002930 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b10      	cmp	r3, #16
 80028f6:	d11b      	bne.n	8002930 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0210 	mvn.w	r2, #16
 8002900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2208      	movs	r2, #8
 8002906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f933 	bl	8002b82 <HAL_TIM_IC_CaptureCallback>
 800291c:	e005      	b.n	800292a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f926 	bl	8002b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f935 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d10e      	bne.n	800295c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d107      	bne.n	800295c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0201 	mvn.w	r2, #1
 8002954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe fde4 	bl	8001524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	2b80      	cmp	r3, #128	; 0x80
 8002968:	d10e      	bne.n	8002988 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002974:	2b80      	cmp	r3, #128	; 0x80
 8002976:	d107      	bne.n	8002988 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fa67 	bl	8002e56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	2b40      	cmp	r3, #64	; 0x40
 8002994:	d10e      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a0:	2b40      	cmp	r3, #64	; 0x40
 80029a2:	d107      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8f9 	bl	8002ba6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d10e      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d107      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0220 	mvn.w	r2, #32
 80029d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fa32 	bl	8002e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_TIM_ConfigClockSource+0x18>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e0b3      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x180>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a38:	d03e      	beq.n	8002ab8 <HAL_TIM_ConfigClockSource+0xd0>
 8002a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3e:	f200 8087 	bhi.w	8002b50 <HAL_TIM_ConfigClockSource+0x168>
 8002a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a46:	f000 8085 	beq.w	8002b54 <HAL_TIM_ConfigClockSource+0x16c>
 8002a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4e:	d87f      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x168>
 8002a50:	2b70      	cmp	r3, #112	; 0x70
 8002a52:	d01a      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0xa2>
 8002a54:	2b70      	cmp	r3, #112	; 0x70
 8002a56:	d87b      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x168>
 8002a58:	2b60      	cmp	r3, #96	; 0x60
 8002a5a:	d050      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x116>
 8002a5c:	2b60      	cmp	r3, #96	; 0x60
 8002a5e:	d877      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x168>
 8002a60:	2b50      	cmp	r3, #80	; 0x50
 8002a62:	d03c      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0xf6>
 8002a64:	2b50      	cmp	r3, #80	; 0x50
 8002a66:	d873      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x168>
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d058      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x136>
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d86f      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x168>
 8002a70:	2b30      	cmp	r3, #48	; 0x30
 8002a72:	d064      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x156>
 8002a74:	2b30      	cmp	r3, #48	; 0x30
 8002a76:	d86b      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x168>
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d060      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x156>
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d867      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x168>
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d05c      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x156>
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d05a      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a88:	e062      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f000 f95c 	bl	8002d56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002aac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	609a      	str	r2, [r3, #8]
      break;
 8002ab6:	e04e      	b.n	8002b56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6899      	ldr	r1, [r3, #8]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f000 f945 	bl	8002d56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ada:	609a      	str	r2, [r3, #8]
      break;
 8002adc:	e03b      	b.n	8002b56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f000 f8bc 	bl	8002c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2150      	movs	r1, #80	; 0x50
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f913 	bl	8002d22 <TIM_ITRx_SetConfig>
      break;
 8002afc:	e02b      	b.n	8002b56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f000 f8da 	bl	8002cc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2160      	movs	r1, #96	; 0x60
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f903 	bl	8002d22 <TIM_ITRx_SetConfig>
      break;
 8002b1c:	e01b      	b.n	8002b56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f000 f89c 	bl	8002c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2140      	movs	r1, #64	; 0x40
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f8f3 	bl	8002d22 <TIM_ITRx_SetConfig>
      break;
 8002b3c:	e00b      	b.n	8002b56 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4619      	mov	r1, r3
 8002b48:	4610      	mov	r0, r2
 8002b4a:	f000 f8ea 	bl	8002d22 <TIM_ITRx_SetConfig>
        break;
 8002b4e:	e002      	b.n	8002b56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b50:	bf00      	nop
 8002b52:	e000      	b.n	8002b56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a25      	ldr	r2, [pc, #148]	; (8002c60 <TIM_Base_SetConfig+0xa8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d007      	beq.n	8002be0 <TIM_Base_SetConfig+0x28>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd6:	d003      	beq.n	8002be0 <TIM_Base_SetConfig+0x28>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a22      	ldr	r2, [pc, #136]	; (8002c64 <TIM_Base_SetConfig+0xac>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d108      	bne.n	8002bf2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1a      	ldr	r2, [pc, #104]	; (8002c60 <TIM_Base_SetConfig+0xa8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <TIM_Base_SetConfig+0x52>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c00:	d003      	beq.n	8002c0a <TIM_Base_SetConfig+0x52>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <TIM_Base_SetConfig+0xac>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d108      	bne.n	8002c1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <TIM_Base_SetConfig+0xa8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d103      	bne.n	8002c50 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	615a      	str	r2, [r3, #20]
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40000400 	.word	0x40000400

08002c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f023 0201 	bic.w	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f023 030a 	bic.w	r3, r3, #10
 8002ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	621a      	str	r2, [r3, #32]
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f023 0210 	bic.w	r2, r3, #16
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	031b      	lsls	r3, r3, #12
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	621a      	str	r2, [r3, #32]
}
 8002d18:	bf00      	nop
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f043 0307 	orr.w	r3, r3, #7
 8002d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	609a      	str	r2, [r3, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b087      	sub	sp, #28
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	021a      	lsls	r2, r3, #8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	609a      	str	r2, [r3, #8]
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e041      	b.n	8002e30 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d009      	beq.n	8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d004      	beq.n	8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d10c      	bne.n	8002e1e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40000400 	.word	0x40000400

08002e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <__libc_init_array>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	2600      	movs	r6, #0
 8002e6c:	4d0c      	ldr	r5, [pc, #48]	; (8002ea0 <__libc_init_array+0x38>)
 8002e6e:	4c0d      	ldr	r4, [pc, #52]	; (8002ea4 <__libc_init_array+0x3c>)
 8002e70:	1b64      	subs	r4, r4, r5
 8002e72:	10a4      	asrs	r4, r4, #2
 8002e74:	42a6      	cmp	r6, r4
 8002e76:	d109      	bne.n	8002e8c <__libc_init_array+0x24>
 8002e78:	f000 f822 	bl	8002ec0 <_init>
 8002e7c:	2600      	movs	r6, #0
 8002e7e:	4d0a      	ldr	r5, [pc, #40]	; (8002ea8 <__libc_init_array+0x40>)
 8002e80:	4c0a      	ldr	r4, [pc, #40]	; (8002eac <__libc_init_array+0x44>)
 8002e82:	1b64      	subs	r4, r4, r5
 8002e84:	10a4      	asrs	r4, r4, #2
 8002e86:	42a6      	cmp	r6, r4
 8002e88:	d105      	bne.n	8002e96 <__libc_init_array+0x2e>
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
 8002e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e90:	4798      	blx	r3
 8002e92:	3601      	adds	r6, #1
 8002e94:	e7ee      	b.n	8002e74 <__libc_init_array+0xc>
 8002e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9a:	4798      	blx	r3
 8002e9c:	3601      	adds	r6, #1
 8002e9e:	e7f2      	b.n	8002e86 <__libc_init_array+0x1e>
 8002ea0:	08002ef8 	.word	0x08002ef8
 8002ea4:	08002ef8 	.word	0x08002ef8
 8002ea8:	08002ef8 	.word	0x08002ef8
 8002eac:	08002efc 	.word	0x08002efc

08002eb0 <memset>:
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4402      	add	r2, r0
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d100      	bne.n	8002eba <memset+0xa>
 8002eb8:	4770      	bx	lr
 8002eba:	f803 1b01 	strb.w	r1, [r3], #1
 8002ebe:	e7f9      	b.n	8002eb4 <memset+0x4>

08002ec0 <_init>:
 8002ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec2:	bf00      	nop
 8002ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec6:	bc08      	pop	{r3}
 8002ec8:	469e      	mov	lr, r3
 8002eca:	4770      	bx	lr

08002ecc <_fini>:
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ece:	bf00      	nop
 8002ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed2:	bc08      	pop	{r3}
 8002ed4:	469e      	mov	lr, r3
 8002ed6:	4770      	bx	lr
